%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 8.0%%AI8_CreatorVersion: 8%%For: (Robert S SIXPack) (SIXPack)%%Title: (BMBF_CMYK_Gef_L.eps)%%CreationDate: (11/19/04) (1:34 PM)%%BoundingBox: 191 355 404 506%%HiResBoundingBox: 191.6724 355.4473 403.2168 505.4668%%DocumentProcessColors: Magenta Yellow Black%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0%%+ procset Adobe_ColorImage_AI6 1.3 0%%+ procset Adobe_Illustrator_AI5 1.3 0%%+ procset Adobe_cshow 2.0 8%%+ procset Adobe_shading_AI8 1.0 0%AI5_FileFormat 4.0%AI3_ColorUsage: Color%AI3_IncludePlacedImages%AI7_ImageSettings: 1%%CMYKProcessColor: 1 1 1 1 ([Passermarken])%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set) %%+ Options: 1 16 0 1 0 1 1 1 0 1 1 1 1 8.504 0 0 0 0 0 0 0 0 131071 -1%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 0 0 () %AI3_TemplateBox: 297.5 420.5 297.5 420.5%AI3_TileBox: 29 31 567 812%AI3_DocumentPreview: Macintosh_ColorPic%AI5_ArtSize: 595 842%AI5_RulerUnits: 1%AI5_ArtFlags: 1 0 0 1 0 0 1 0 0%AI5_TargetResolution: 800%AI5_NumLayers: 1%AI8_OpenToView: -646 980 1 1905 1149 18 1 1 7 43 0 0%AI5_OpenViewLayers: 7%%PageOrigin:29 31%%AI3_PaperRect:-29 812 566 -30%%AI3_Margin:29 -31 -28 30%AI7_GridSettings: 28.3465 8 28.3465 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9%AI7_Thumbnail: 128 92 8%%BeginData: 5162 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FDFCFFFDFCFFFDFCFFFDFCFFFDFCFFFD47FF7D52A8FD75FF7D27FF%277D52527DA827FF5252A85227A87D527D5227A852527D7D7DA87D7D27FF%27A87D52FD5BFF52A8A827A87D7DFF27A8FD045227A8277D7DFF27527DA8%A8FFA87D52A8277D7DF87D5227FD5AFF7D7D27A8F87D52527D277D7D2752%7D27A82752527D2727A87DA8FFFF27277D527D7D27522727FD5AFFA8F852%A827527DA8FFF8275227A8522727527D527D27A852A87DFFFF5252A8F827%7D52277D27FD5BFFA87DFF7DA87DFFFFA87DFFA8FFA8A8A8FFFD05A8FFA8%FFFFFFA8A8FFA87DFFA8FFA8A8FDFCFFFDFCFFFDFCFFFDFCFFFDFCFFFDFC%FFFDDCFF525252FD79FF7D27277D52F8F87D27277DFD07FFA8275252FD04%FFA8F8F827A8FD0BFF277DFD0EFF277DFD04FF52A8FD05FFA8FD07FF27A8%FD2FFFF827A8A8F8F8F8A8A827F8FD07FF7DF8F827FD04FF7D27A82752FD%09FFA8FF27A8FFA8A8FFFFA8FD06FFA8FD05FFA8FD04FFA8FFFF27A8FFFF%A8FFFFFFA8FD0AFFA8FD25FF52277DFFFF7DF827FFFF52F87DFD06FFA8F8%F827FD04FFA827A827FF527DA852A827F87DFF272727A8522727A852F852%FFF8272727F8A852FFF82727FF7DA852F8527D2727A82727527D275227A8%27A8527D5227F852F852FD23FFA8F8F827A8FFF8F8F8FF7D27F8F8A8FD05%FF7DF8F827FD04FF7D272727A87D52A827A8F8FFF8A8F8FFF8A8F8A827A8%F8527DFFF8FFF8FFF8A827FF27A8527D52A827527DFF27A8525252275227%A8277D277D7D527D525252A827FD23FF27F8F82727FD05F82752F8F852FD%05FFA8F8F827FD04FFA827FF2752527D7D52A827FFF8A827A8F8A8F8527D%A8FF5227A8F8FFF8FF277D52FF27FF7D527D7DFF5227A852A87D277D7D7D%52FF27A827A8527D527D527D7D52FD22FF52FD04F82727F8F8F82727FD04%F87DFD04FF7DF8F827FD04FF7D2752F827A8F82727A827FFF8FFF827F8A8%F852F8FF272727FFF8FFF8FF27A827FF27FF527D52A8275227FF27525252%F87D5252FF277D52F8F85252527D52A827FD21FFA82727FD0BF827F85227%FD04FFA8F8F827FD05FF527D7DFFFFA87DA8A87DFF7DFFA87DA8A8A852FF%FFFF7DFFFF7DFF7DFF7DA8A8FF7DFFFD04A8FF7DFFFFFF52FF7DA8FFA8A8%FF7DFFFF7D7DFD07A8FD22FFA8FD0DF827F8A8FD04FF7DF8F827FD67FF27%27F827F8F852F8F8272727F827F852F8FD04FFA8F8F827FD68FFF8F8F827%F87DF8F8F87DFD05F8FD05FF7DF8F827FD05FFA8F8FF7D7DA8FD04FFA827%2727FFFD047DFFFFA852FD4BFF7D7DF8F8F87DFD04F8277DF827F87DA8FD%04FFA8F8F827FD05FFF8FFA87D7DFD05FFA852FF2752FFA87D52FFFFA827%FD4CFF5227F8525227FD04F85227F82752FD05FF7DF8F827FD04FF7DF827%277D7D527D2752FFA8277DF8FF7D7D527D7DF8F8277D27FFF8FFF8F852FF%52F8277DFD40FF52277D52277DF87D27527D5227FD06FFA8F8F827FD05FF%F8FF27A8527D5227FFFF7D27F827A8A8527D527D7D5227A827FFF8FFF8A8%27A8F87DF8A8FD41FF52F8272727F8FD04277DFD07FF7DF8F827FD05FFF8%FF277D7D525252FFFFA827FF27527D7D5252527D52277D27FFF8FFF8FF27%7DF8FF277DFD42FF2727FF52F852FF27F8FD08FFA8F8F827FD05FFF8FF52%52277D527DFFFFA82752F827A8527D527DF82727FF2752F8FFF8FF27A827%52F8A8FD42FFA87D7D2727F8A87DA8FD08FF7DF8F827FD05FF7DFFFF527D%7DA87DFFFFA8527D52FFA8A8527DA87D527DFFA87D7DFF7DFF7DA87D5252%7DFD53FFCAFCFCB5FD25FFA82752FD54FFC3FCFCB5FD26FFA8FD55FFCAFC%FCB5FD0FFF52A8FFFF275227FD0FFF52FD56FFC3FCFCB5FD0FFF277DFFFF%F87DA8A8FD0EFF277DFD55FFCAFCFCB5FD04FFA827FFF8FFF82752FF52F8%F8A8FFFFF8A8A8FFF82752A8F8527D2727FF7D2752FF272727FF527D7D52%A827F87DFF52F827A8FD46FFC3FCFCB5FD04FF7D27FFF8FFF87D27A8F8A8%F87DFFFFF827275252A8F87DF87D7D277D7D277D527D272752527D52A827%A8F8A8F8FFF852F8A8FD46FFCAFCFCB5FD04FFA827FFF8FFF8FF27A8F8FF%F8A8FFFFF8FFFF7D52FFF8A827FFFF52F8A827A8FFFF27A8A87D527DA852%A852FF52FFF8FF27A8FD46FFC3FCFCB5FD04FFA8F852F8FFF8FF277DF827%F87DFFFFF8FFFF7D277DF87D27FFA827527D52522752277DA852A8F85227%A827FF27FFF852F8A8FD46FFCAFCFCB5FD05FF7D7D52FF52FF7DFF7D527D%FFFFFF52FFFFFF52277DFF7DFFFF7D7DFFA85252FF7DFFA8A8FF7D7D7DA8%7DFF7DFF7D52277DFD46FFC3FCFCB5FD32FF7DF852FD47FFCAFCFCB5FD33%FFA8FD48FFC3FCFCB5FD7CFFCAFCFCB5FD7CFFC3FCFCB5FD7CFFCAFCFCB5%FD7CFFC9C6A4C7FD7CFFCFC6FEC7FD7CFFC9C6A4CCFD7CFFCFC6FEC7FD7C%FFCEC6A4CCFD7CFFCFC6C6C7FD7CFFA7C6A4C7FD7CFFCFC6FEC7FD7CFFC9%C6A4C7FD7CFFCFC6FEC7FD7CFFC9C6A4CCFD7CFFCFC6FEC7FD7CFFCEC6A4%CCFD7CFFCFC6C6C7FD7CFFA7C6A4C7FDFCFFFDFCFFFDFCFFFDFCFFFDFCFF%FDFCFFFDFCFFFDFCFFFD79FFFF%%EndData%%EndComments%%BeginProlog%%BeginResource: procset Adobe_level2_AI5 1.2 0%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)%%Version: 1.2 0%%CreationDate: (04/10/93) ()%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)userdict /Adobe_level2_AI5 26 dict dup begin	put	/packedarray where not	{		userdict begin		/packedarray		{			array astore readonly		} bind def		/setpacking /pop load def		/currentpacking false def	 end		0	} if	pop	userdict /defaultpacking currentpacking put true setpacking	/initialize	{		Adobe_level2_AI5 begin	} bind def	/terminate	{		currentdict Adobe_level2_AI5 eq		{		 end		} if	} bind def	mark	/setcustomcolor where not	{		/findcmykcustomcolor		{			(AI8_CMYK_CustomColor)			6 packedarray		} bind def		/findrgbcustomcolor		{			(AI8_RGB_CustomColor)			5 packedarray		} bind def		/setcustomcolor		{			exch 			aload pop dup			(AI8_CMYK_CustomColor) eq			{				pop pop				4				{					4 index mul					4 1 roll				} repeat				5 -1 roll pop				setcmykcolor			}			{				dup (AI8_RGB_CustomColor) eq				{					pop pop					3					{						1 exch sub						3 index mul 						1 exch sub						3 1 roll					} repeat					4 -1 roll pop					setrgbcolor				}				{					pop					4					{						4 index mul 4 1 roll					} repeat					5 -1 roll pop					setcmykcolor				} ifelse			} ifelse		}		def	} if	/setAIseparationgray	{		false setoverprint		0 setgray		/setseparationgray where{			pop setseparationgray		}{			/setcolorspace where{				pop				[/Separation (All) /DeviceCMYK {dup dup dup}] setcolorspace				1 exch sub setcolor			}{				setgray			}ifelse		}ifelse	} def		/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put	userdict /level2?	systemdict /languagelevel known dup	{		pop systemdict /languagelevel get 2 ge	} if	put/level2ScreenFreq{ begin		60		HalftoneType 1 eq		{			pop Frequency		} if		HalftoneType 2 eq		{			pop GrayFrequency		} if		HalftoneType 5 eq		{			pop Default level2ScreenFreq		} if end} bind defuserdict /currentScreenFreq  	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse putlevel2? not	{		/setcmykcolor where not		{			/setcmykcolor			{				exch .11 mul add exch .59 mul add exch .3 mul add				1 exch sub setgray			} def		} if		/currentcmykcolor where not		{			/currentcmykcolor			{				0 0 0 1 currentgray sub			} def		} if		/setoverprint where not		{			/setoverprint /pop load def		} if		/selectfont where not		{			/selectfont			{				exch findfont exch				dup type /arraytype eq				{					makefont				}				{					scalefont				} ifelse				setfont			} bind def		} if		/cshow where not		{			/cshow			{				[				0 0 5 -1 roll aload pop				] cvx bind forall			} bind def		} if	} if	cleartomark	/anyColor?	{		add add add 0 ne	} bind def	/testColor	{		gsave		setcmykcolor currentcmykcolor		grestore	} bind def	/testCMYKColorThrough	{		testColor anyColor?	} bind def	userdict /composite?	1 0 0 0 testCMYKColorThrough	0 1 0 0 testCMYKColorThrough	0 0 1 0 testCMYKColorThrough	0 0 0 1 testCMYKColorThrough	and and and	put	composite? not	{		userdict begin		gsave		/cyan? 1 0 0 0 testCMYKColorThrough def		/magenta? 0 1 0 0 testCMYKColorThrough def		/yellow? 0 0 1 0 testCMYKColorThrough def		/black? 0 0 0 1 testCMYKColorThrough def		grestore		/isCMYKSep? cyan? magenta? yellow? black? or or or def		/customColor? isCMYKSep? not def	 end	} if end defaultpacking setpacking%%EndResource%%BeginProcSet: Adobe_ColorImage_AI6 1.3 0userdict /Adobe_ColorImage_AI6 known not{	userdict /Adobe_ColorImage_AI6 53 dict put } ifuserdict /Adobe_ColorImage_AI6 get begin/initialize { 	Adobe_ColorImage_AI6 begin	Adobe_ColorImage_AI6 {		dup type /arraytype eq {			dup xcheck {				bind			} if		} if		pop pop	} forall} def/terminate { end } defcurrentdict /Adobe_ColorImage_AI6_Vars known not {	/Adobe_ColorImage_AI6_Vars 41 dict def} ifAdobe_ColorImage_AI6_Vars begin	/plateindex -1 def	/_newproc null def	/_proc1 null def	/_proc2 null def	/sourcearray 4 array def	/_ptispace null def	/_ptiname null def	/_pti0 0 def	/_pti1 0 def	/_ptiproc null def	/_ptiscale 0 def	/_pticomps 0 def	/_ptibuf 0 string def	/_gtigray 0 def	/_cticmyk null def	/_rtirgb null def	/XIEnable true def	/XIType 0 def	/XIEncoding 0 def	/XICompression 0 def	/XIChannelCount 0 def	/XIBitsPerPixel 0 def	/XIImageHeight 0 def	/XIImageWidth 0 def	/XIImageMatrix null def	/XIRowBytes 0 def	/XIFile null def	/XIBuffer1 null def	/XIBuffer2 null def	/XIBuffer3 null def	/XIDataProc null def	/XIColorSpace /DeviceGray def	/XIColorValues 0 def	/XIPlateList false defend/ci6colorimage /colorimage where {/colorimage get}{null} ifelse def/ci6image systemdict /image get def/ci6curtransfer systemdict /currenttransfer get def/ci6curoverprint /currentoverprint where {/currentoverprint get}{{_of}} ifelse def/ci6foureq {	4 index ne {		pop pop pop false	}{		4 index ne {			pop pop false		}{			4 index ne {				pop false			}{				4 index eq			} ifelse		} ifelse	} ifelse} def/ci6testplate {	Adobe_ColorImage_AI6_Vars begin		/plateindex -1 def		/setcmykcolor where {			pop			gsave			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub			grestore			1 0 0 0 ci6foureq { 				/plateindex 0 def			}{				0 1 0 0 ci6foureq { 					/plateindex 1 def				}{					0 0 1 0 ci6foureq {						/plateindex 2 def					}{						0 0 0 1 ci6foureq { 							/plateindex 3 def						}{							0 0 0 0 ci6foureq {								/plateindex 5 def							} if						} ifelse					} ifelse				} ifelse			} ifelse			pop pop pop pop		} if		plateindex end} def/ci6concatprocs {	/packedarray where {		pop dup type /packedarraytype eq 2 index type		/packedarraytype eq or	}{		false	} ifelse	{		/_proc2 exch cvlit def		/_proc1 exch cvlit def		_proc1 aload pop		_proc2 aload pop		_proc1 length		_proc2 length add		packedarray cvx	}{		/_proc2 exch cvlit def		/_proc1 exch cvlit def		/_newproc _proc1 length _proc2 length add array def		_newproc 0 _proc1 putinterval		_newproc _proc1 length _proc2 putinterval		_newproc cvx	} ifelse} def/ci6istint {	type /arraytype eq } def/ci6isspot {	dup type /arraytype eq {		dup length 1 sub get /Separation eq	}{		pop false	} ifelse} def/ci6spotname {	dup ci6isspot {dup length 2 sub get}{pop ()} ifelse} def/ci6altspace {	aload pop pop pop ci6colormake} def/ci6numcomps {	dup /DeviceGray eq {		pop 1	}{		dup /DeviceRGB eq {			pop 3		}{			/DeviceCMYK eq {				4			}{				1			} ifelse		} ifelse	} ifelse} def/ci6marksplate {	dup /DeviceGray eq {		pop plateindex 3 eq	}{		dup /DeviceRGB eq {			pop plateindex 5 ne		}{			dup /DeviceCMYK eq {				pop plateindex 5 ne			}{				dup ci6isspot {					/findcmykcustomcolor where {						pop						dup length 2 sub get						0.1 0.1 0.1 0.1 5 -1 roll						findcmykcustomcolor 1 setcustomcolor						systemdict /currentgray get exec						1 ne					}{						pop plateindex 5 ne					} ifelse				}{					pop plateindex 5 ne				} ifelse			} ifelse		} ifelse	} ifelse} def/ci6colormake {	dup ci6numcomps	exch 1 index 2 add 1 roll	dup 1 eq {pop}{array astore} ifelse	exch} def/ci6colorexpand {	dup ci6spotname exch	dup ci6istint {		ci6altspace		exch 4 1 roll	}{		1 3 1 roll	} ifelse} def/ci6colortint {	dup /DeviceGray eq {		3 1 roll 1 exch sub mul 1 exch sub exch	}{		dup /DeviceRGB eq {			3 1 roll {1 exch sub 1 index mul 1 exch sub exch} forall pop 3 array astore exch		}{			dup /DeviceCMYK eq {				3 1 roll {1 index mul exch} forall pop 4 array astore exch			}{				3 1 roll mul exch			} ifelse		} ifelse	} ifelse} def/ci6colortocmyk {	dup /DeviceGray eq {		pop 1 exch sub 0 0 0 4 -1 roll 4 array astore	}{		dup /DeviceRGB eq {			pop aload pop _rgbtocmyk 4 array astore		}{			dup /DeviceCMYK eq {				pop			}{				ci6altspace ci6colortint ci6colortocmyk			} ifelse		} ifelse	} ifelse} def/ci6makeimagedict {	7 dict begin		/ImageType 1 def		/Decode exch def		/DataSource exch def		/ImageMatrix exch def		/BitsPerComponent exch def		/Height exch def		/Width exch def	currentdict end} def/ci6stringinvert {	0 1 2 index length 1 sub {		dup 2 index exch get 255 exch sub 2 index 3 1 roll put	} for} def/ci6stringknockout {	0 1 2 index length 1 sub {		255 2 index 3 1 roll put	} for} def/ci6stringapply {	0 1 4 index length 1 sub {		dup		4 index exch get		3 index 3 1 roll		3 index exec	} for	pop exch pop} def/ci6walkrgbstring {	0 3 index	dup length 1 sub 0 3 3 -1 roll {		3 getinterval {} forall		5 index exec		3 index	} for		 5 {pop} repeat} def/ci6walkcmykstring{	0 3 index	dup length 1 sub 0 4 3 -1 roll {		4 getinterval {} forall				6 index exec				3 index			} for		5 { pop } repeat	} def/ci6putrgbtograystr{	.11 mul exch		.59 mul add exch		.3 mul add		cvi 3 copy put		pop 1 add} def/ci6putcmyktograystr{	exch .11 mul add		exch .59 mul add		exch .3 mul add		dup 255 gt { pop 255 } if		255 exch sub cvi 3 copy put		pop 1 add} def/ci6rgbtograyproc {		Adobe_ColorImage_AI6_Vars begin 		sourcearray 0 get exec		XIBuffer3		dup 3 1 roll 				/ci6putrgbtograystr load exch		ci6walkrgbstring end} def/ci6cmyktograyproc {		Adobe_ColorImage_AI6_Vars begin		sourcearray 0 get exec		XIBuffer3		dup 3 1 roll 				/ci6putcmyktograystr load exch		ci6walkcmykstring end} def/ci6separatecmykproc {		Adobe_ColorImage_AI6_Vars begin		sourcearray 0 get exec				XIBuffer3				0 2 index				plateindex 4 2 index length 1 sub {			get 255 exch sub						3 copy put pop 1 add						2 index		} for		pop pop exch pop end} def	/ci6compositeimage {	dup 1 eq {		pop pop image	}{		/ci6colorimage load null ne {			ci6colorimage		}{			3 1 roll pop			sourcearray 0 3 -1 roll put			3 eq {/ci6rgbtograyproc}{/ci6cmyktograyproc} ifelse load			image		} ifelse	} ifelse} def/ci6knockoutimage {	gsave	0 ci6curtransfer exec 1 ci6curtransfer exec	eq {		0 ci6curtransfer exec 0.5 lt	}{		0 ci6curtransfer exec 1 ci6curtransfer exec gt	} ifelse	{{pop 0}}{{pop 1}} ifelse	systemdict /settransfer get exec	ci6compositeimage	grestore} def/ci6drawimage {	ci6testplate -1 eq {		pop ci6compositeimage	}{		dup type /arraytype eq {			dup length plateindex gt {plateindex get}{pop false} ifelse		}{			{				true			}{				dup 1 eq {plateindex 3 eq}{plateindex 3 le} ifelse			} ifelse		} ifelse		{			dup 1 eq {				pop pop ci6image			}{				dup 3 eq {					ci6compositeimage				}{					pop pop					sourcearray 0 3 -1 roll put					/ci6separatecmykproc load					ci6image				} ifelse			} ifelse		}{			ci6curoverprint {				7 {pop} repeat			}{				ci6knockoutimage			} ifelse		} ifelse	} ifelse} def/ci6proctintimage {	/_ptispace exch store /_ptiname exch store /_pti1 exch store /_pti0 exch store /_ptiproc exch store	/_pticomps _ptispace ci6numcomps store	/_ptiscale _pti1 _pti0 sub store	level2? {		_ptiname length 0 gt version cvr 2012 ge and {			[/Separation _ptiname _ptispace {_ptiproc}] setcolorspace			[_pti0 _pti1] ci6makeimagedict ci6image		}{			[/Indexed _ptispace 255 {255 div _ptiscale mul _pti0 add _ptiproc}] setcolorspace			[0 255] ci6makeimagedict ci6image		} ifelse	}{		_pticomps 1 eq {			{				dup				{					255 div _ptiscale mul _pti0 add _ptiproc 255 mul cvi put				} ci6stringapply			} ci6concatprocs ci6image		}{			{				dup length _pticomps mul dup _ptibuf length ne {/_ptibuf exch string store}{pop} ifelse				_ptibuf {					exch _pticomps mul exch 255 div _ptiscale mul _pti0 add _ptiproc					_pticomps 2 add -2 roll					_pticomps 1 sub -1 0 {						1 index add 2 index exch						5 -1 roll						255 mul cvi put					} for					pop pop				} ci6stringapply			} ci6concatprocs false _pticomps			/ci6colorimage load null eq {7 {pop} repeat}{ci6colorimage} ifelse		} ifelse	} ifelse} def/ci6graytintimage {	/_gtigray 5 -1 roll store	{1 _gtigray sub mul 1 exch sub} 4 1 roll	/DeviceGray ci6proctintimage} def/ci6cmyktintimage {	/_cticmyk 5 -1 roll store	{_cticmyk {1 index mul exch} forall pop} 4 1 roll	/DeviceCMYK ci6proctintimage} def/ci6rgbtintimage {	/_rtirgb 5 -1 roll store	{_rtirgb {1 exch sub 1 index mul 1 exch sub exch} forall pop} 4 1 roll	/DeviceRGB ci6proctintimage} def/ci6tintimage {	ci6testplate -1 eq {		ci6colorexpand		3 -1 roll 5 -1 roll {0}{0 exch} ifelse 4 2 roll		dup /DeviceGray eq {			pop ci6graytintimage		}{			dup /DeviceRGB eq {				pop ci6rgbtintimage			}{				pop ci6cmyktintimage			} ifelse		} ifelse	}{		dup ci6marksplate {			plateindex 5 lt {				ci6colortocmyk plateindex get				dup 0 eq ci6curoverprint and {					7 {pop} repeat				}{					1 exch sub					exch {1 0}{0 1} ifelse () ci6graytintimage				} ifelse			}{				pop exch {0}{0 exch} ifelse 0 3 1 roll () ci6graytintimage			} ifelse		}{			ci6curoverprint {				8 {pop} repeat			}{				pop pop pop				{pop 1} 0 1 () /DeviceGray ci6proctintimage			} ifelse		} ifelse	} ifelse} def/XINullImage {} def/XIImageMask {	XIImageWidth XIImageHeight false	[XIImageWidth 0 0 XIImageHeight neg 0 0]	/XIDataProc load	imagemask} def/XIImageTint {	XIImageWidth XIImageHeight XIBitsPerPixel	[XIImageWidth 0 0 XIImageHeight neg 0 0]	/XIDataProc load	XIType 3 eq XIColorValues XIColorSpace ci6tintimage} def/XIImage {	XIImageWidth XIImageHeight XIBitsPerPixel	[XIImageWidth 0 0 XIImageHeight neg 0 0]	/XIDataProc load	false XIChannelCount XIPlateList ci6drawimage} def/XG {	pop pop} def/XF {	13 {pop} repeat} def/Xh {	Adobe_ColorImage_AI6_Vars begin		gsave		/XIType exch def		/XIImageHeight exch def		/XIImageWidth exch def		/XIImageMatrix exch def		0 0 moveto		XIImageMatrix concat		XIImageWidth XIImageHeight scale				/_lp /null ddef		_fc		/_lp /imagemask ddef end} def/XH {	Adobe_ColorImage_AI6_Vars begin		grestore end} def/XIEnable {	Adobe_ColorImage_AI6_Vars /XIEnable 3 -1 roll put} def/XC {	Adobe_ColorImage_AI6_Vars begin		ci6colormake		/XIColorSpace exch def		/XIColorValues exch def end} def/XIPlates {	Adobe_ColorImage_AI6_Vars begin		/XIPlateList exch def end} def/XI{	Adobe_ColorImage_AI6_Vars begin		gsave		/XIType exch def		cvi dup		256 idiv /XICompression exch store		256 mod /XIEncoding exch store		pop pop		/XIChannelCount exch def		/XIBitsPerPixel exch def		/XIImageHeight exch def		/XIImageWidth exch def		pop pop pop pop		/XIImageMatrix exch def		XIBitsPerPixel 1 eq {			XIImageWidth 8 div ceiling cvi		}{			XIImageWidth XIChannelCount mul		} ifelse		/XIRowBytes exch def		XIEnable {			/XIBuffer3 XIImageWidth string def			XICompression 0 eq {				/XIBuffer1 XIRowBytes string def				XIEncoding 0 eq {					{currentfile XIBuffer1 readhexstring pop}				}{					{currentfile XIBuffer1 readstring pop}				} ifelse			}{				/XIBuffer1 256 string def				/XIBuffer2 XIRowBytes string def				{currentfile XIBuffer1 readline pop (%) anchorsearch {pop} if}				/ASCII85Decode filter /DCTDecode filter				/XIFile exch def				{XIFile XIBuffer2 readstring pop}			} ifelse			/XIDataProc exch def						XIType 1 ne {				0 setgray			} if			XIType 1 eq {				XIImageMask			}{				XIType 2 eq XIType 3 eq or {					XIImageTint				}{					XIImage				} ifelse			} ifelse		}{			XINullImage		} ifelse		/XIPlateList false def		grestore end} defend%%EndProcSet%%BeginResource: procset Adobe_Illustrator_AI5 1.3 0%%Title: (Adobe Illustrator (R) Version 8.0 Full Prolog)%%Version: 1.3 0%%CreationDate: (3/7/1994) ()%%Copyright: ((C) 1987-1998 Adobe Systems Incorporated All Rights Reserved)currentpacking true setpackinguserdict /Adobe_Illustrator_AI5_vars 112 dict dup beginput/_?cmyk false def/_eo false def/_lp /none def/_pf{} def/_ps{} def/_psf{} def/_pss{} def/_pjsf{} def/_pjss{} def/_pola 0 def/_doClip 0 def/cf currentflat def/_lineorientation 0 def/_charorientation 0 def/_yokoorientation 0 def/_tm matrix def/_renderStart[/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0] def/_renderEnd[null null null null /i1 /i1 /i1 /i1] def/_render -1 def/_shift [0 0] def/_ax 0 def/_ay 0 def/_cx 0 def/_cy 0 def/_leading[0 0] def/_ctm matrix def/_mtx matrix def/_sp 16#020 def/_hyphen (-) def/_fontSize 0 def/_fontAscent 0 def/_fontDescent 0 def/_fontHeight 0 def/_fontRotateAdjust 0 def/Ss 256 string defSs 0 (fonts/) putinterval/_cnt 0 def/_scale [1 1] def/_nativeEncoding 0 def/_useNativeEncoding 0 def/_tempEncode 0 def/_pntr 0 def/_tDict 2 dict def/_hfname 100 string def/_hffound false def/Tx{} def/Tj{} def/CRender{} def/_AI3_savepage{} def/_gf null def/_cf 4 array def/_rgbf 3 array def/_if null def/_of false def/_fc{} def/_gs null def/_cs 4 array def/_rgbs 3 array def/_is null def/_os false def/_sc{} def/_pd 1 dict def/_ed 15 dict def/_pm matrix def/_fm null def/_fd null def/_fdd null def/_sm null def/_sd null def/_sdd null def/_i null def/_lobyte 0 def/_hibyte 0 def/_cproc null def/_cscript 0 def/_hvax 0 def/_hvay 0 def/_hvwb 0 def/_hvcx 0 def/_hvcy 0 def/_bitfont null def/_bitlobyte 0 def/_bithibyte 0 def/_bitkey null def/_bitdata null def/_bitindex 0 def/discardSave null def/buffer 256 string def/beginString null def/endString null def/endStringLength null def/layerCnt 1 def/layerCount 1 def/perCent (%) 0 get def/perCentSeen? false def/newBuff null def/newBuffButFirst null def/newBuffLast null def/clipForward? false defenduserdict /Adobe_Illustrator_AI5 known not {	userdict /Adobe_Illustrator_AI5 100 dict put} ifuserdict /Adobe_Illustrator_AI5 get begin/initialize{	Adobe_Illustrator_AI5 dup begin	Adobe_Illustrator_AI5_vars begin	/_aicmykps where {pop /_?cmyk _aicmykps def}if	discardDict	{		bind pop pop	} forall	dup /nc get begin	{		dup xcheck 1 index type /operatortype ne and		{			bind		} if		pop pop	} forall end	newpath} def/terminate{ end end} def/_null def/ddef{	Adobe_Illustrator_AI5_vars 3 1 roll put} def/xput{	dup load dup length exch maxlength eq	{		dup dup load dup		length 2 mul dict copy def	} if	load begin	def end} def/npop{	{		pop	} repeat} def/hswj{	dup stringwidth 3 2 roll	{		_hvwb eq { exch _hvcx add exch _hvcy add } if		exch _hvax add exch _hvay add	} cforall} def/vswj{	0 0 3 -1 roll	{		dup 255 le		_charorientation 1 eq		and		{			dup cstring stringwidth 5 2 roll			_hvwb eq { exch _hvcy sub exch _hvcx sub } if			exch _hvay sub exch _hvax sub			4 -1 roll sub exch			3 -1 roll sub exch		}		{			_hvwb eq { exch _hvcy sub exch _hvcx sub } if			exch _hvay sub exch _hvax sub			_fontHeight sub		} ifelse	} cforall} def/swj{	6 1 roll	/_hvay exch ddef	/_hvax exch ddef	/_hvwb exch ddef	/_hvcy exch ddef	/_hvcx exch ddef	_lineorientation 0 eq { hswj } { vswj } ifelse} def/sw{	0 0 0 6 3 roll swj} def/vjss{	4 1 roll	{		dup cstring		dup length 1 eq		_charorientation 1 eq		and		{			-90 rotate			currentpoint			_fontRotateAdjust add			moveto			gsave			false charpath currentpoint			5 index setmatrix stroke			grestore			_fontRotateAdjust sub			moveto			_sp eq			{				5 index 5 index rmoveto			} if			2 copy rmoveto			90 rotate		}		{			currentpoint			_fontHeight sub			5 index sub			3 index _sp eq			{				9 index sub			} if				currentpoint			exch 4 index stringwidth pop 2 div sub			exch _fontAscent sub			moveto				gsave			2 index false charpath			6 index setmatrix stroke			grestore				moveto pop pop		} ifelse	} cforall	6 npop} def/hjss{	4 1 roll	{		dup cstring		gsave		false charpath currentpoint		5 index setmatrix stroke		grestore		moveto		_sp eq		{			5 index 5 index rmoveto		} if		2 copy rmoveto	} cforall	6 npop} def/jss{	_lineorientation 0 eq { hjss } { vjss } ifelse} def/ss{	0 0 0 7 3 roll jss} def/vjsp{	4 1 roll	{		dup cstring		dup length 1 eq		_charorientation 1 eq		and		{			-90 rotate			currentpoint			_fontRotateAdjust add			moveto			false charpath            currentpoint			_fontRotateAdjust sub			moveto			_sp eq			{				5 index 5 index rmoveto			} if			2 copy rmoveto			90 rotate		}		{			currentpoint			_fontHeight sub			5 index sub			3 index _sp eq			{				9 index sub			} if				currentpoint			exch 4 index stringwidth pop 2 div sub			exch _fontAscent sub			moveto				2 index false charpath				moveto pop pop		} ifelse	} cforall	6 npop} def/hjsp{    4 1 roll    {        dup cstring        false charpath        _sp eq        {            5 index 5 index rmoveto        } if        2 copy rmoveto    } cforall    6 npop} def/jsp{	matrix currentmatrix    _lineorientation 0 eq {hjsp} {vjsp} ifelse} def/sp{    matrix currentmatrix    0 0 0 7 3 roll    _lineorientation 0 eq {hjsp} {vjsp} ifelse} def/pl{	transform	0.25 sub round 0.25 add exch	0.25 sub round 0.25 add exch	itransform} def/setstrokeadjust where{	pop true setstrokeadjust	/c	{		curveto	} def	/C	/c load def	/v	{		currentpoint 6 2 roll curveto	} def	/V	/v load def	/y	{		2 copy curveto	} def	/Y	/y load def	/l	{		lineto	} def	/L	/l load def	/m	{		moveto	} def}{	/c	{		pl curveto	} def	/C	/c load def	/v	{		currentpoint 6 2 roll pl curveto	} def	/V	/v load def	/y	{		pl 2 copy curveto	} def	/Y	/y load def	/l	{		pl lineto	} def	/L	/l load def	/m	{		pl moveto	} def} ifelse/d{	setdash} def/cf{} def/i{	dup 0 eq	{		pop cf	} if	setflat} def/j{	setlinejoin} def/J{	setlinecap} def/M{	setmiterlimit} def/w{	setlinewidth} def/XR{	0 ne	/_eo exch ddef} def/H{} def/h{	closepath} def/N{	_pola 0 eq	{		_doClip 1 eq		{			_eo {eoclip} {clip} ifelse /_doClip 0 ddef		} if		newpath	}	{		/CRender		{			N		} ddef	} ifelse} def/n{	N} def/F{	_pola 0 eq	{		_doClip 1 eq		{			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc			/_doClip 0 ddef		}		{			_pf		} ifelse	}	{		/CRender		{			F		} ddef	} ifelse} def/f{	closepath	F} def/S{	_pola 0 eq	{		_doClip 1 eq		{			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc			/_doClip 0 ddef		}		{			_ps		} ifelse	}	{		/CRender		{			S		} ddef	} ifelse} def/s{	closepath	S} def/B{	_pola 0 eq	{		_doClip 1 eq		gsave F grestore		{			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc			/_doClip 0 ddef		}		{			S		} ifelse	}	{		/CRender		{			B		} ddef	} ifelse} def/b{	closepath	B} def/W{	/_doClip 1 ddef} def/*{	count 0 ne	{		dup type /stringtype eq		{			pop		} if	} if	newpath} def/u{} def/U{} def/q{	_pola 0 eq	{		gsave	} if} def/Q{	_pola 0 eq	{		grestore	} if} def/*u{	_pola 1 add /_pola exch ddef} def/*U{	_pola 1 sub /_pola exch ddef	_pola 0 eq	{		CRender	} if} def/D{	pop} def/*w{} def/*W{} def/`{	/_i save ddef	clipForward?	{		nulldevice	} if	6 1 roll 4 npop	concat pop	userdict begin	/showpage	{	} def	0 setgray	0 setlinecap	1 setlinewidth	0 setlinejoin	10 setmiterlimit	[] 0 setdash	/setstrokeadjust where {pop false setstrokeadjust} if	newpath	0 setgray	false setoverprint} def/~{ end	_i restore} def/_rgbtocmyk{	3	{		1 exch sub 3 1 roll	} repeat	3 copy 1 4 1 roll	3	{		3 index 2 copy gt		{			exch		} if		pop 4 1 roll	} repeat	pop pop pop	4 1 roll	3	{		3 index sub		3 1 roll	} repeat	4 -1 roll} def/setrgbfill{	_rgbf astore pop	/_fc	{		_lp /fill ne		{			_of setoverprint			_rgbf aload pop setrgbcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		hvashow	} ddef	/_pjsf	{		_fc		hvawidthshow	} ddef	/_lp /none ddef} def/setrgbstroke{	_rgbs astore pop	/_sc	{		_lp /stroke ne		{			_os setoverprint			_rgbs aload pop setrgbcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/O{	0 ne	/_of exch ddef	/_lp /none ddef} def/R{	0 ne	/_os exch ddef	/_lp /none ddef} def/g{	/_gf exch ddef	/_fc	{		_lp /fill ne		{			_of setoverprint			_gf setgray			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		hvashow	} ddef	/_pjsf	{		_fc		hvawidthshow	} ddef	/_lp /none ddef} def/G{	/_gs exch ddef	/_sc	{		_lp /stroke ne		{			_os setoverprint			_gs setgray			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/k{	_cf astore pop	/_fc	{		_lp /fill ne		{			_of setoverprint			_cf aload pop setcmykcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		hvashow	} ddef	/_pjsf	{		_fc		hvawidthshow	} ddef	/_lp /none ddef} def/K{	_cs astore pop	/_sc	{		_lp /stroke ne		{			_os setoverprint			_cs aload pop setcmykcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/Xa{	_?cmyk {		3 npop k	}{		setrgbfill 4 npop	} ifelse} def/XA{	_?cmyk {		3 npop K	}{		setrgbstroke 4 npop	} ifelse} def/Xs{	/_gf exch ddef	5 npop	/_fc	{		_lp /fill ne		{			_of setoverprint			_gf setAIseparationgray			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		hvashow	} ddef	/_pjsf	{		_fc		hvawidthshow	} ddef	/_lp /none ddef} def/XS{	/_gs exch ddef	5 npop	/_sc	{		_lp /stroke ne		{			_os setoverprint			_gs setAIseparationgray			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/Xx{	exch	/_gf exch ddef	0 eq {		findcmykcustomcolor	}{		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse		{			4 1 roll 3 npop			findcmykcustomcolor		}{			8 -4 roll 4 npop			findrgbcustomcolor		} ifelse	} ifelse	/_if exch ddef	/_fc	{		_lp /fill ne		{			_of setoverprint			_if _gf 1 exch sub setcustomcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		hvashow	} ddef	/_pjsf	{		_fc		hvawidthshow	} ddef	/_lp /none ddef} def/XX{	exch	/_gs exch ddef	0 eq {		findcmykcustomcolor	}{		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse		{			4 1 roll 3 npop			findcmykcustomcolor		}{			8 -4 roll 4 npop			findrgbcustomcolor		} ifelse	} ifelse	/_is exch ddef	/_sc	{		_lp /stroke ne		{			_os setoverprint			_is _gs 1 exch sub setcustomcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/x{	/_gf exch ddef	findcmykcustomcolor	/_if exch ddef	/_fc	{		_lp /fill ne		{			_of setoverprint			_if _gf 1 exch sub setcustomcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		hvashow	} ddef	/_pjsf	{		_fc		hvawidthshow	} ddef	/_lp /none ddef} def/X{	/_gs exch ddef	findcmykcustomcolor	/_is exch ddef	/_sc	{		_lp /stroke ne		{			_os setoverprint			_is _gs 1 exch sub setcustomcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/XK{	3 -1 roll pop	0 eq	{		1 exch sub		3 {dup 3 1 roll mul 5 1 roll} repeat		mul 4 1 roll		K	}	{		1 exch sub 4 1 roll		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat		4 -1 roll pop		XA	} ifelse} def/Xk{	3 -1 roll pop	0 eq	{		1 exch sub		3 {dup 3 1 roll mul 5 1 roll} repeat		mul 4 1 roll		k	}	{		1 exch sub 4 1 roll		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat		4 -1 roll pop		Xa	} ifelse} def/A{	pop} def/annotatepage{userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse} def/XT {	pop pop} def/Xt {	pop} def/discard{	save /discardSave exch store	discardDict begin	/endString exch store	gt38?	{		2 add	} if	load	stopped	pop end	discardSave restore} bind defuserdict /discardDict 7 dict dup beginput/pre38Initialize{	/endStringLength endString length store	/newBuff buffer 0 endStringLength getinterval store	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store} def/shiftBuffer{	newBuff 0 newBuffButFirst putinterval	newBuffLast 0	currentfile read not	{	stop	} if	put} def0{	pre38Initialize	mark	currentfile newBuff readstring exch pop	{		{			newBuff endString eq			{				cleartomark stop			} if			shiftBuffer		} loop	}	{	stop	} ifelse} def1{	pre38Initialize	/beginString exch store	mark	currentfile newBuff readstring exch pop	{		{			newBuff beginString eq			{				/layerCount dup load 1 add store			}			{				newBuff endString eq				{					/layerCount dup load 1 sub store					layerCount 0 eq					{						cleartomark stop					} if				} if			} ifelse			shiftBuffer		} loop	} if} def2{	mark	{		currentfile buffer {readline} stopped {			% assume error was due to overfilling the buffer		}{			not			{				stop			} if			endString eq {				cleartomark stop			} if		}ifelse	} loop} def3{	/beginString exch store	/layerCnt 1 store	mark	{		currentfile buffer {readline} stopped {			% assume error was due to overfilling the buffer		}{			not			{				stop			} if			dup beginString eq			{				pop /layerCnt dup load 1 add store			}			{				endString eq				{					layerCnt 1 eq					{						cleartomark stop					}					{						/layerCnt dup load 1 sub store					} ifelse				} if			} ifelse		}ifelse	} loop} defenduserdict /clipRenderOff 15 dict dup beginput{	/n /N /s /S /f /F /b /B}{	{		_doClip 1 eq		{			/_doClip 0 ddef _eo {eoclip} {clip} ifelse		} if		newpath	} def} forall/Tr /pop load def/Bb {} def/BB /pop load def/Bg {12 npop} def/Bm {6 npop} def/Bc /Bm load def/Bh {4 npop} defend/Lb{	6 npop	7 2 roll	5 npop	0 eq	{		0 eq		{			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard		}		{						/clipForward? true def						/Tx /pop load def			/Tj /pop load def						currentdict end clipRenderOff begin begin		} ifelse	}	{		0 eq		{			save /discardSave exch store		} if	} ifelse} bind def/LB{	discardSave dup null ne	{		restore	}	{		pop		clipForward?		{			currentdict		 end		 end		 begin								/clipForward? false ddef		} if	} ifelse} bind def/Pb{	pop pop	0 (%AI5_EndPalette) discard} bind def/Np{	0 (%AI5_End_NonPrinting--) discard} bind def/Ln /pop load def/Ap/pop load def/Ar{	72 exch div	0 dtransform dup mul exch dup mul add sqrt	dup 1 lt	{		pop 1	} if	setflat} def/Mb{	q} def/Md{} def/MB{	Q} def/nc 4 dict defnc begin/setgray{	pop} bind def/setcmykcolor{	4 npop} bind def/setrgbcolor{	3 npop} bind def/setcustomcolor{	2 npop} bind defcurrentdict readonly popend/XP{	4 npop} bind def/XD{	pop} bind defendsetpacking%%EndResource%%BeginResource: procset Adobe_cshow 2.0 8%%Title: (Writing System Operators)%%Version: 2.0 8%%CreationDate: (1/23/89) ()%%Copyright: ((C) 1992-1996 Adobe Systems Incorporated All Rights Reserved)currentpacking true setpackinguserdict /Adobe_cshow 14 dict dup begin put/initialize{	Adobe_cshow begin	Adobe_cshow	{		dup xcheck		{			bind		} if		pop pop	} forall end	Adobe_cshow begin} def/terminate{currentdict Adobe_cshow eq	{ end	} if} def/cforall{	/_lobyte 0 ddef	/_hibyte 0 ddef	/_cproc exch ddef	/_cscript currentfont /FontScript known { currentfont /FontScript get } { -1 } ifelse ddef	{		/_lobyte exch ddef		_hibyte 0 eq		_cscript 1 eq		_lobyte 129 ge _lobyte 159 le and		_lobyte 224 ge _lobyte 252 le and or and		_cscript 2 eq		_lobyte 161 ge _lobyte 254 le and and		_cscript 3 eq		_lobyte 161 ge _lobyte 254 le and and    	_cscript 25 eq		_lobyte 161 ge _lobyte 254 le and and    	_cscript -1 eq		or or or or and		{			/_hibyte _lobyte ddef		}		{			_hibyte 256 mul _lobyte add			_cproc			/_hibyte 0 ddef		} ifelse	} forall} def/cstring{	dup 256 lt	{		(s) dup 0 4 3 roll put	}	{		dup 256 idiv exch 256 mod		(hl) dup dup 0 6 5 roll put 1 4 3 roll put	} ifelse} def/clength{	0 exch	{ 256 lt { 1 } { 2 } ifelse add } cforall} def/hawidthshow{	{		dup cstring		show		_hvax _hvay rmoveto		_hvwb eq { _hvcx _hvcy rmoveto } if	} cforall} def/vawidthshow{	{		dup 255 le		_charorientation 1 eq		and		{			-90 rotate			0 _fontRotateAdjust rmoveto			cstring			_hvcx _hvcy _hvwb _hvax _hvay 6 -1 roll awidthshow			0 _fontRotateAdjust neg rmoveto			90 rotate		}		{			currentpoint			_fontHeight sub			exch _hvay sub exch _hvax sub			2 index _hvwb eq { exch _hvcy sub exch _hvcx sub } if			3 2 roll			cstring			dup stringwidth pop 2 div neg _fontAscent neg rmoveto			show			moveto		} ifelse	} cforall} def/hvawidthshow{	6 1 roll	/_hvay exch ddef	/_hvax exch ddef	/_hvwb exch ddef	/_hvcy exch ddef	/_hvcx exch ddef	_lineorientation 0 eq { hawidthshow } { vawidthshow } ifelse} def/hvwidthshow{	0 0 3 -1 roll hvawidthshow} def/hvashow{	0 0 0 6 -3 roll hvawidthshow} def/hvshow{	0 0 0 0 0 6 -1 roll hvawidthshow} defcurrentdict readonly pop endsetpacking%%EndResource%%BeginResource: procset Adobe_shading_AI8 1.0 0%%Title: (Adobe Illustrator 8 Shading Procset)%%Version: 1.0 0%%CreationDate: (12/17/97) ()%%Copyright: ((C) 1987-1997 Adobe Systems Incorporated All Rights Reserved)userdict /defaultpacking currentpacking put true setpackinguserdict /Adobe_shading_AI8 10 dict dup begin put/initialize {	Adobe_shading_AI8 begin	Adobe_shading_AI8 bdprocs	Mesh /initialize get exec} def/terminate {	currentdict Adobe_shading_AI8 eq {	 end	} if} def/bdprocs {	{		dup xcheck 1 index type /arraytype eq and {			bind		} if		pop pop	} forall} def/X! {pop} def/X# {pop pop} def/Mesh 40 dict defMesh begin/initialize {	Mesh bdprocs	Mesh begin		/emulate? /AI8MeshEmulation where {			pop AI8MeshEmulation		}{			systemdict /shfill known not		} ifelse def end} def/bd {	shadingdict begin} def/paint {	emulate? {	 end	}{		/_lp /none ddef _fc /_lp /none ddef				/AIColorSpace AIColorSpace tocolorspace store		/ColorSpace AIColorSpace topsspace store				version_ge_3010.106 not systemdict /setsmoothness known and {			0.0001 setsmoothness		} if				composite? {			/DataSource getdatasrc def			Matrix concat			currentdict end			shfill		}{			AIColorSpace makesmarks AIPlateList markingplate and not isoverprint and {			 end			}{				/ColorSpace /DeviceGray store				/Decode [0 1 0 1 0 1] store				/DataSource getplatesrc def				Matrix concat				currentdict end				shfill			} ifelse		} ifelse	} ifelse} def/shadingdict 12 dict defshadingdict begin	/ShadingType 6 def	/BitsPerCoordinate 16 def	/BitsPerComponent 8 def	/BitsPerFlag 8 defend/datafile null def/databuf 256 string def/dataptr 0 def/srcspace null def/srcchannels 0 def/dstchannels 0 def/dstplate 0 def/srctodstcolor null def/getplatesrc {	/srcspace AIColorSpace store	/srcchannels AIColorSpace getnchannels store	/dstchannels 1 store	/dstplate getplateindex store	/srctodstcolor srcspace makesmarks {		dstplate 4 eq {			{1 exch sub}		}{			{srcspace tocmyk 3 dstplate sub index 1 exch sub 5 1 roll 4 {pop} repeat}		} ifelse	}{		{srcchannels {pop} repeat 1}	} ifelse store	/datafile getdatasrc store	/rdpatch168 load DataLength () /SubFileDecode filter} def/getdatasrc {	/rdcmntline load /ASCII85Decode filter} def/rdpatch168 {	/dataptr 0 store	49 rdcount	4 {		dup {pop srcchannels getint8} if		dup {pop srctodstcolor dstchannels putint8 true} if	} repeat	{databuf 0 dataptr getinterval}{()} ifelse} def/rdpatch3216 {	/dataptr 0 store	97 rdcount	4 {		dup {pop srcchannels getint16} if		dup {pop srctodstcolor dstchannels putint16 true} if	} repeat	{databuf 0 dataptr getinterval}{()} ifelse} def/rdcount {	dup 0 gt {		datafile databuf dataptr 4 -1 roll getinterval readstring		exch length dataptr add /dataptr exch store	}{		true	} ifelse} def/getint8 {	mark true 3 -1 roll	{		dup {pop datafile read} if		dup {pop 255 div true} if	} repeat	{		counttomark 1 add -1 roll pop true	}{		cleartomark false	} ifelse} def/putint8 {	dup dataptr add /dataptr exch store	dataptr exch	{		1 sub exch		255 mul cvi		databuf 2 index		3 -1 roll put	} repeat	pop} def /getint16 {	mark true 3 -1 roll	{		dup {pop datafile read} if		dup {pop 256 mul datafile read} if		dup {pop add 65535 div true} if	} repeat	{		counttomark 1 add -1 roll pop true	}{		cleartomark false	} ifelse} def/putint16 {	dup 2 mul dataptr add /dataptr exch store	dataptr exch	{		2 sub exch		65535 mul cvi dup		256 idiv databuf 3 index 3 -1 roll put		256 mod databuf 2 index 1 add 3 -1 roll put	} repeat	pop} def /srcbuf 256 string def/rdcmntline {	currentfile srcbuf readline pop	(%) anchorsearch {pop} if} def/getplateindex {	0 [cyan? magenta? yellow? black? customColor?] {{exit} if 1 add} forall} def/aicsarray 4 array def/aicsaltvals 4 array def/aicsaltcolr aicsaltvals def/tocolorspace {	dup type /arraytype eq {		mark exch aload pop		aicsarray 0 3 -1 roll put		aicsarray 1 3 -1 roll put		dup aicsarray 2 3 -1 roll put		gettintxform aicsarray 3 3 -1 roll put		counttomark aicsaltvals 0 3 -1 roll getinterval /aicsaltcolr exch store		aicsaltcolr astore pop pop		aicsarray	} if} def/subtintxform {aicsaltcolr {1 index mul exch} forall pop} def/addtintxform {aicsaltcolr {1 sub 1 index mul 1 add exch} forall pop} def/gettintxform {	/DeviceRGB eq {/addtintxform}{/subtintxform} ifelse load} def/getnchannels {	dup type /arraytype eq {0 get} if	colorspacedict exch get begin Channels end} def/makesmarks {	composite? {		pop true	}{		dup dup type /arraytype eq {0 get} if		colorspacedict exch get begin MarksPlate end	} ifelse} def/markingplate {	composite? {		pop true	}{		dup type /arraytype eq {			dup length getplateindex gt {getplateindex get}{pop false} ifelse		} if	} ifelse} def/tocmyk {	dup dup type /arraytype eq {0 get} if	colorspacedict exch get begin ToCMYK end} def/topsspace {	dup dup type /arraytype eq {0 get} if	colorspacedict exch get begin ToPSSpace end} def/colorspacedict 5 dict dup begin	/DeviceGray 4 dict dup begin		/Channels 1 def		/MarksPlate {pop black?} def		/ToCMYK {pop 1 exch sub 0 0 0 4 -1 roll} def		/ToPSSpace {} def end def	/DeviceRGB 4 dict dup begin		/Channels 3 def		/MarksPlate {pop isCMYKSep?} def		/ToCMYK {pop _rgbtocmyk} def		/ToPSSpace {} def end def	/DeviceCMYK 4 dict dup begin		/Channels 4 def		/MarksPlate {pop isCMYKSep?} def		/ToCMYK {pop} def		/ToPSSpace {} def end def	/Separation 4 dict dup begin		/Channels 1 def		/MarksPlate {			/findcmykcustomcolor where {				pop dup 1 exch ToCMYK 5 -1 roll 1 get				findcmykcustomcolor 1 setcustomcolor				systemdict /currentgray get exec				1 ne			}{				pop false			} ifelse		} def		/ToCMYK {			dup 2 get mark exch 4 2 roll			3 get exec			counttomark -1 roll tocmyk			5 -1 roll pop		} def		/ToPSSpace {} def end def	/Process 4 dict dup begin		/Channels 1 def		/MarksPlate {			isCMYKSep? {				1 exch ToCMYK 4 array astore getplateindex get 0 ne 			}{				pop false			} ifelse		} def		/ToCMYK {			dup 2 get mark exch 4 2 roll			3 get exec			counttomark -1 roll tocmyk			5 -1 roll pop		} def		/ToPSSpace {			4 array copy dup 0 /Separation put		} def end defend def/isoverprint {	/currentoverprint where {pop currentoverprint}{_of} ifelse} def/version_ge_3010.106 {   version {cvr} stopped {      pop      false   }{      3010.106 ge   } ifelse} defendenddefaultpacking setpacking%%EndResource%%EndProlog%%BeginSetupuserdict /_useSmoothShade false putuserdict /_aicmykps true putuserdict /_forceToCMYK true putAdobe_level2_AI5 /initialize get execAdobe_cshow /initialize get execAdobe_ColorImage_AI6 /initialize get execAdobe_shading_AI8 /initialize get execAdobe_Illustrator_AI5 /initialize get exec%AI5_BeginPalette0 0 Pb1 1 1 1 ([Passermarken]) 0 Xs([Passermarken]) Pc1 1 1 1 k(C=100 M=100 Y=100 K=100) Pc(C=100 M=100 Y=100 K=100) Pc(C=100 M=100 Y=100 K=100) PcPB%AI5_EndPalette%AI5_Begin_NonPrintingNp%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp%AI8_PluginGroupInfo(Adobe Path Blends) (Adobe Angleichungen-Zusatzmodul) (Angleichungen)%AI8_PluginGroupInfo(Adobe PatternOnPath Brush Tool) (Adobe Musterpinsel-Zusatzmodul) (Bildpinsel-Werkzeug)%AI8_PluginGroupInfo(Adobe ArtOnPath Brush Tool) (Adobe Bildpinsel-Zusatzmodul) (Bildpinsel-Werkzeug)%AI8_PluginGroupInfo(Adobe Calligraphic Brush Tool) (R\237ckg\212ngig: Neuer Kalligraphiepinsel) (Kalligraphiepinsel-Werkzeug)%AI8_PluginGroupInfo(Adobe Scatter Brush Tool) (Adobe Spezialpinsel-Zusatzmodul) (Spezialpinsel-Werkzeug)%AI5_End_NonPrinting--%%EndSetup%AI5_BeginLayer1 1 1 1 0 0 1 0 79 128 255 0 100 Lb(Ebene 1) Ln1 Au1 Ap0 O0 0 0 0 k800 Ar0 J 0 j 1 w 4 M []0 d%AI3_Note:0 D0 XR403.2168 355.4473 m191.6724 355.4473 L191.6724 505.4668 L403.2168 505.4668 L403.2168 355.4473 Lfu0 Ap1 O0 0 0 1 k300 Ar266.2358 417.834 m266.2358 416.6582 265.4653 416.1953 264.8501 416.1953 c264.0376 416.1953 263.645 416.7695 263.645 417.623 c263.645 422.5239 l262.4976 422.5239 l262.4976 417.1328 l262.4976 415.9297 263.1685 415.3145 264.4019 415.3145 c265.1431 415.3145 265.8149 415.6641 266.1938 416.3066 c266.2358 416.3066 l266.2358 415.4531 l267.4536 415.4531 l267.4116 415.9453 267.3833 416.4336 267.3833 416.9238 c267.3833 422.5239 l266.2358 422.5239 l266.2358 417.834 l266.2358 417.834 lf274.4399 415.4531 m274.4399 420.354 l274.4399 421.7534 274.062 422.6636 272.5503 422.6636 c271.6392 422.6636 271.1069 422.4116 270.6597 421.6138 c270.605 421.6138 l270.605 422.5239 l269.3862 422.5239 l269.4282 422.0337 269.4546 421.5454 269.4546 421.0532 c269.4546 415.4531 l270.605 415.4531 l270.605 419.6406 l270.605 420.6069 270.7856 421.7261 272.0454 421.7261 c273.0259 421.7261 273.2915 421.1089 273.2915 420.354 c273.2915 415.4531 l274.4399 415.4531 l274.4399 415.4531 lf*u280.0815 419.2754 m280.0815 417.8496 280.0815 416.252 278.7935 416.252 c277.3521 416.252 277.3521 417.793 277.3521 418.8555 c277.3521 420.7456 277.521 421.7261 278.7534 421.7261 c280.0259 421.7261 280.0815 420.2134 280.0815 419.2754 c280.0815 419.2754 lf1 D280.0815 421.811 m280.0405 421.811 l279.6479 422.3687 279.1587 422.6636 278.4868 422.6636 c276.2046 422.6636 276.1489 420.6343 276.1489 418.8691 c276.1489 415.7617 277.2964 415.3145 278.4312 415.3145 c279.1724 415.3145 279.6616 415.6367 280.0532 416.2949 c280.0815 416.2949 l280.0815 415.4531 l281.23 415.4531 l281.23 425.561 l280.0815 425.561 l280.0815 421.811 l280.0815 421.811 lf*U0 D287.3472 415.4531 m287.3472 420.0737 l290.8755 420.0737 l290.8755 421.1948 l287.3472 421.1948 l287.3472 424.4429 l291.0708 424.4429 l291.0708 425.561 l286.0581 425.561 l286.0581 415.4531 l287.3472 415.4531 l287.3472 415.4531 lf*u294.5962 416.252 m293.4058 416.252 293.1118 417.0781 293.1118 419.375 c293.1118 421.3071 293.7124 421.7261 294.5962 421.7261 c295.478 421.7261 296.0806 421.3071 296.0806 419.375 c296.0806 417.0781 295.7856 416.252 294.5962 416.252 c294.5962 416.252 lf1 D294.5962 415.3145 m296.0942 415.3145 297.2837 415.7617 297.2837 418.8848 c297.2837 420.9565 297.0454 422.6636 294.5962 422.6636 c292.146 422.6636 291.9077 420.9565 291.9077 418.8848 c291.9077 415.7617 293.0972 415.3145 294.5962 415.3145 c294.5962 415.3145 lf*U0 D300.2246 422.5239 m299.0762 422.5239 l299.0762 415.4531 l300.2246 415.4531 l300.2246 419.625 l300.2246 420.5786 300.5469 421.5454 301.8184 421.5454 c302.0293 421.5454 302.2266 421.5015 302.4355 421.4731 c302.4355 422.6636 l301.3164 422.6636 300.7305 422.5386 300.2539 421.4595 c300.2246 421.4595 l300.2246 422.5239 l300.2246 422.5239 lf308.168 417.4707 m308.168 419.625 304.6387 419.5977 304.6387 420.8442 c304.6387 421.4595 305.1172 421.7954 305.7324 421.7954 c306.459 421.7954 306.8535 421.4038 306.8379 420.6626 c308.1133 420.6626 l308.2109 422.062 307.1328 422.6636 305.873 422.6636 c303.8848 422.6636 303.4355 421.4731 303.4355 420.7319 c303.4355 418.6172 306.9648 418.5898 306.9648 417.3301 c306.9648 416.6016 306.4336 416.252 305.7441 416.252 c304.584 416.252 304.5703 417.2051 304.5703 417.6094 c303.2695 417.6094 l303.2246 415.9863 304.1797 415.3145 305.7051 415.3145 c307.1035 415.3145 308.168 415.916 308.168 417.4707 c308.168 417.4707 lf314.5059 420.2573 m314.5781 421.8394 313.75 422.6636 312.3359 422.6636 c309.8867 422.6636 309.6484 420.9565 309.6484 418.8848 c309.6484 415.7617 310.8398 415.3145 312.3359 415.3145 c313.123 415.3145 314.6074 415.8184 314.5625 417.8066 c313.3594 417.8066 l313.4004 416.5313 312.6016 416.252 312.3359 416.252 c311.1465 416.252 310.8535 417.0781 310.8535 419.375 c310.8535 421.3071 311.4551 421.7261 312.3359 421.7261 c312.7715 421.7261 313.3438 421.4175 313.3184 420.2573 c314.5059 420.2573 l314.5059 420.2573 lf321.3945 415.4531 m321.3945 420.4663 l321.3945 422.062 320.7227 422.6636 319.5195 422.6636 c318.5957 422.6636 318.0645 422.4399 317.6016 421.6138 c317.5469 421.6138 l317.5469 425.561 l316.3984 425.561 l316.3984 415.4531 l317.5469 415.4531 l317.5469 419.6133 l317.5469 420.8022 317.8398 421.7261 318.9863 421.7261 c319.9688 421.7261 320.2461 421.1089 320.2461 420.2417 c320.2461 415.4531 l321.3945 415.4531 l321.3945 415.4531 lf327.1914 417.834 m327.1914 416.6582 326.4238 416.1953 325.8047 416.1953 c324.9922 416.1953 324.6016 416.7695 324.6016 417.623 c324.6016 422.5239 l323.4551 422.5239 l323.4551 417.1328 l323.4551 415.9297 324.125 415.3145 325.3594 415.3145 c326.1016 415.3145 326.7715 415.6641 327.1504 416.3066 c327.1914 416.3066 l327.1914 415.4531 l328.4102 415.4531 l328.3672 415.9453 328.3398 416.4336 328.3398 416.9238 c328.3398 422.5239 l327.1914 422.5239 l327.1914 417.834 l327.1914 417.834 lf335.3945 415.4531 m335.3945 420.354 l335.3945 421.7534 335.0176 422.6636 333.5059 422.6636 c332.5977 422.6636 332.0645 422.4116 331.6152 421.6138 c331.5605 421.6138 l331.5605 422.5239 l330.3438 422.5239 l330.3828 422.0337 330.4121 421.5454 330.4121 421.0532 c330.4121 415.4531 l331.5605 415.4531 l331.5605 419.6406 l331.5605 420.6069 331.7422 421.7261 333.002 421.7261 c333.9824 421.7261 334.248 421.1089 334.248 420.354 c334.248 415.4531 l335.3945 415.4531 l335.3945 415.4531 lf*u341.0664 419.0254 m341.0664 418.043 341.1074 416.4063 339.7246 416.4063 c338.8691 416.4063 338.3496 416.9375 338.3496 419.2051 c338.3496 420.144 338.3926 421.7114 339.6953 421.7114 c341.1348 421.7114 341.0664 420.0737 341.0664 419.0254 c341.0664 419.0254 lf1 D341.0391 421.6558 m341.0098 421.6558 l340.6875 422.3413 340.1016 422.6636 339.3594 422.6636 c338.7871 422.6636 337.1484 422.4546 337.1484 419.2051 c337.1484 417.1055 337.5234 415.4531 339.4434 415.4531 c340.0586 415.4531 340.7031 415.7754 340.9961 416.3359 c341.0391 416.3359 l341.0391 414.8652 l341.0391 414.1387 340.6055 413.6465 339.8066 413.6465 c339.1777 413.6465 338.7422 414.0117 338.7305 414.6699 c337.4414 414.6699 l337.3438 413.3672 338.4082 412.7813 339.582 412.7813 c341.1348 412.7813 342.1875 413.1582 342.1875 414.7402 c342.1875 422.5239 l341.0391 422.5239 l341.0391 421.6558 l341.0391 421.6558 lf*U0 D261.9937 437.5239 m261.9937 436.6558 l263.0845 436.6558 l263.0845 430.4536 l264.2329 430.4536 l264.2329 436.6558 l265.6616 436.6558 l265.6616 437.5239 l264.2329 437.5239 l264.2329 438.728 l264.2329 439.3013 264.4429 439.8198 265.6616 439.7378 c265.6616 440.561 l265.4927 440.5903 265.3521 440.604 265.1138 440.604 c264.0923 440.604 263.0845 440.3247 263.0845 438.895 c263.0845 437.5239 l261.9937 437.5239 l261.9937 437.5239 lf*u268.6821 440.1694 m267.3657 440.1694 l267.3657 438.7144 l268.6821 438.7144 l268.6821 440.1694 l268.6821 440.1694 lf1 D271.146 440.1694 m269.8286 440.1694 l269.8286 438.7144 l271.146 438.7144 l271.146 440.1694 l271.146 440.1694 lf270.5435 432.8335 m270.5435 431.6577 269.7739 431.1958 269.1567 431.1958 c268.3462 431.1958 267.9536 431.771 267.9536 432.6226 c267.9536 437.5239 l266.8052 437.5239 l266.8052 432.1333 l266.8052 430.9302 267.478 430.314 268.7095 430.314 c269.4517 430.314 270.1235 430.6636 270.5015 431.3071 c270.5435 431.3071 l270.5435 430.4536 l271.7612 430.4536 l271.7202 430.9448 271.6929 431.4341 271.6929 431.9233 c271.6929 437.5239 l270.5435 437.5239 l270.5435 432.8335 l270.5435 432.8335 lf*U0 D274.9536 437.5239 m273.8062 437.5239 l273.8062 430.4536 l274.9536 430.4536 l274.9536 434.6245 l274.9536 435.5786 275.2759 436.5454 276.5513 436.5454 c276.7612 436.5454 276.9546 436.5015 277.1665 436.4731 c277.1665 437.6636 l276.0454 437.6636 275.4575 437.5386 274.9819 436.4595 c274.9536 436.4595 l274.9536 437.5239 l274.9536 437.5239 lf*u281.9448 435.1851 m283.3169 435.1851 l284.6333 435.1851 285.6255 434.9067 285.6255 433.2954 c285.6255 432.5542 285.1372 431.5737 283.7642 431.5737 c281.9448 431.5737 l281.9448 435.1851 l281.9448 435.1851 lf281.9448 439.4429 m283.7642 439.4429 l284.8433 439.4429 285.3188 438.7554 285.3188 437.9175 c285.3188 436.936 284.8286 436.3198 283.8218 436.3071 c281.9448 436.3071 l281.9448 439.4429 l281.9448 439.4429 lf1 D283.9058 430.4536 m285.0522 430.4536 286.9419 430.7056 286.9419 433.2954 c286.9419 434.6812 286.312 435.5503 284.8716 435.7183 c284.8716 435.7866 l286.1733 436.0815 286.606 436.9224 286.606 438.1831 c286.606 438.3774 286.5503 438.979 286.1997 439.5269 c285.8228 440.0864 285.3462 440.561 283.9468 440.561 c280.6577 440.561 l280.6577 430.4536 l283.9058 430.4536 l283.9058 430.4536 lf*U*u289.9321 437.5239 m288.7837 437.5239 l288.7837 430.4536 l289.9321 430.4536 l289.9321 437.5239 l289.9321 437.5239 lf288.7144 439.3306 m290.0034 439.3306 l290.0034 440.561 l288.7144 440.561 l288.7144 439.3306 l288.7144 439.3306 lf*U0 D293.1782 440.561 m292.0317 440.561 l292.0317 430.4536 l293.1782 430.4536 l293.1782 440.561 l293.1782 440.561 lf*u298.9043 434.2759 m298.9043 432.8491 298.9043 431.2515 297.6157 431.2515 c296.1724 431.2515 296.1724 432.7925 296.1724 433.856 c296.1724 435.7456 296.3413 436.7261 297.5728 436.7261 c298.8477 436.7261 298.9043 435.2134 298.9043 434.2759 c298.9043 434.2759 lf1 D298.9043 436.811 m298.8594 436.811 l298.4688 437.3687 297.98 437.6636 297.3071 437.6636 c295.0259 437.6636 294.9692 435.6343 294.9692 433.8696 c294.9692 430.7612 296.1177 430.314 297.2505 430.314 c297.9937 430.314 298.4824 430.6362 298.877 431.2944 c298.9043 431.2944 l298.9043 430.4536 l300.0508 430.4536 l300.0508 440.561 l298.9043 440.561 l298.9043 436.811 l298.9043 436.811 lf*U0 D305.9473 432.8335 m305.9473 431.6577 305.1758 431.1958 304.5605 431.1958 c303.748 431.1958 303.3574 431.771 303.3574 432.6226 c303.3574 437.5239 l302.207 437.5239 l302.207 432.1333 l302.207 430.9302 302.8789 430.314 304.1113 430.314 c304.8535 430.314 305.5273 430.6636 305.9023 431.3071 c305.9473 431.3071 l305.9473 430.4536 l307.1621 430.4536 l307.1211 430.9448 307.0918 431.4341 307.0918 431.9233 c307.0918 437.5239 l305.9473 437.5239 l305.9473 432.8335 l305.9473 432.8335 lf314.1504 430.4536 m314.1504 435.354 l314.1504 436.7534 313.7715 437.6636 312.2598 437.6636 c311.3496 437.6636 310.8184 437.4116 310.3711 436.6138 c310.3125 436.6138 l310.3125 437.5239 l309.0957 437.5239 l309.1387 437.0337 309.168 436.5454 309.168 436.0532 c309.168 430.4536 l310.3125 430.4536 l310.3125 434.6411 l310.3125 435.6069 310.4961 436.7261 311.7559 436.7261 c312.7363 436.7261 313.002 436.1089 313.002 435.354 c313.002 430.4536 l314.1504 430.4536 l314.1504 430.4536 lf*u319.8223 434.0249 m319.8223 433.0425 319.8633 431.4058 318.4766 431.4058 c317.6211 431.4058 317.1035 431.937 317.1035 434.2046 c317.1035 435.144 317.1465 436.7114 318.4492 436.7114 c319.8906 436.7114 319.8223 435.0737 319.8223 434.0249 c319.8223 434.0249 lf1 D319.793 436.6558 m319.7656 436.6558 l319.4434 437.3413 318.8555 437.6636 318.1133 437.6636 c317.5391 437.6636 315.9004 437.4546 315.9004 434.2046 c315.9004 432.105 316.2793 430.4536 318.1953 430.4536 c318.8105 430.4536 319.4551 430.7759 319.75 431.3354 c319.793 431.3354 l319.793 429.8667 l319.793 429.1382 319.3574 428.647 318.5625 428.647 c317.9297 428.647 317.4941 429.0122 317.4824 429.6704 c316.1934 429.6704 l316.0957 428.3687 317.1602 427.7808 318.3379 427.7808 c319.8906 427.7808 320.9395 428.1577 320.9395 429.7397 c320.9395 437.5239 l319.793 437.5239 l319.793 436.6558 l319.793 436.6558 lf*U*u0 D263.8286 450.1851 m265.2017 450.1851 l266.5171 450.1851 267.5112 449.9067 267.5112 448.2954 c267.5112 447.5542 267.021 446.5737 265.6499 446.5737 c263.8286 446.5737 l263.8286 450.1851 l263.8286 450.1851 lf263.8286 454.4429 m265.6499 454.4429 l266.7271 454.4429 267.2036 453.7554 267.2036 452.9175 c267.2036 451.936 266.7124 451.3198 265.7036 451.3071 c263.8286 451.3071 l263.8286 454.4429 l263.8286 454.4429 lf1 D265.7876 445.4536 m266.938 445.4536 268.8267 445.7056 268.8267 448.2954 c268.8267 449.6812 268.1978 450.5503 266.7544 450.7183 c266.7544 450.7866 l268.0571 451.0815 268.4917 451.9224 268.4917 453.1831 c268.4917 453.3774 268.436 453.979 268.0854 454.5269 c267.7085 455.0864 267.2319 455.561 265.8315 455.561 c262.5405 455.561 l262.5405 445.4536 l265.7876 445.4536 l265.7876 445.4536 lf*U0 D274.2397 447.8335 m274.2397 446.6577 273.4683 446.1958 272.8521 446.1958 c272.0415 446.1958 271.6489 446.771 271.6489 447.6226 c271.6489 452.5239 l270.5015 452.5239 l270.5015 447.1333 l270.5015 445.9302 271.1733 445.314 272.4048 445.314 c273.146 445.314 273.8188 445.6636 274.1958 446.3071 c274.2397 446.3071 l274.2397 445.4536 l275.4556 445.4536 l275.4146 445.9448 275.3872 446.4341 275.3872 446.9233 c275.3872 452.5239 l274.2397 452.5239 l274.2397 447.8335 l274.2397 447.8335 lf282.4448 445.4536 m282.4448 450.354 l282.4448 451.7534 282.0649 452.6636 280.5532 452.6636 c279.6431 452.6636 279.1118 452.4116 278.6636 451.6138 c278.6069 451.6138 l278.6069 452.5239 l277.3892 452.5239 l277.4321 452.0337 277.4604 451.5454 277.4604 451.0532 c277.4604 445.4536 l278.6069 445.4536 l278.6069 449.6411 l278.6069 450.6069 278.7896 451.7261 280.0503 451.7261 c281.0298 451.7261 281.2954 451.1089 281.2954 450.354 c281.2954 445.4536 l282.4448 445.4536 l282.4448 445.4536 lf*u288.0854 449.2759 m288.0854 447.8491 288.0854 446.2515 286.7974 446.2515 c285.356 446.2515 285.356 447.7925 285.356 448.856 c285.356 450.7456 285.5239 451.7261 286.7563 451.7261 c288.0288 451.7261 288.0854 450.2134 288.0854 449.2759 c288.0854 449.2759 lf1 D288.0854 451.811 m288.0444 451.811 l287.6528 452.3687 287.1616 452.6636 286.4907 452.6636 c284.2075 452.6636 284.1519 450.6343 284.1519 448.8696 c284.1519 445.7612 285.2993 445.314 286.4341 445.314 c287.1763 445.314 287.6665 445.6362 288.0571 446.2944 c288.0854 446.2944 l288.0854 445.4536 l289.2339 445.4536 l289.2339 455.561 l288.0854 455.561 l288.0854 451.811 l288.0854 451.811 lf*U*u0 D292.2017 449.4858 m292.2163 451.4448 292.8188 451.7954 293.5464 451.7954 c294.3853 451.7954 294.9614 451.5454 294.9614 449.4858 c292.2017 449.4858 l292.2017 449.4858 lf1 D296.1782 448.6177 m296.1782 449.2202 l296.1782 451.5571 295.6733 452.6636 293.6587 452.6636 c291.2085 452.6636 290.9702 450.9565 290.9702 448.8843 c290.9702 445.7612 292.1597 445.314 293.6587 445.314 c295.1431 445.314 296.1079 446.0278 296.1226 447.5952 c294.8628 447.5952 l294.8208 446.8833 294.4136 446.2515 293.6313 446.2515 c292.7349 446.2515 292.2017 446.644 292.2017 448.6177 c296.1782 448.6177 l296.1782 448.6177 lf*U0 D302.5078 447.4702 m302.5078 449.6245 298.9785 449.5981 298.9785 450.8442 c298.9785 451.4595 299.4551 451.7954 300.0703 451.7954 c300.7988 451.7954 301.1914 451.4038 301.1758 450.6626 c302.4512 450.6626 l302.5488 452.062 301.4688 452.6636 300.209 452.6636 c298.2227 452.6636 297.7749 451.4731 297.7749 450.7319 c297.7749 448.6177 301.3027 448.5894 301.3027 447.3296 c301.3027 446.6011 300.7715 446.2515 300.0859 446.2515 c298.9238 446.2515 298.9082 447.2046 298.9082 447.6099 c297.6069 447.6099 l297.5649 445.9858 298.5156 445.314 300.043 445.314 c301.4434 445.314 302.5078 445.9165 302.5078 447.4702 c302.5078 447.4702 lf308.916 445.4536 m308.916 450.2134 l308.916 450.48 308.9688 451.1802 309.3086 451.4595 c309.6133 451.7114 309.7402 451.7261 310.1758 451.7261 c311.1016 451.7261 311.2969 451.0679 311.2969 450.354 c311.2969 445.4536 l312.4434 445.4536 l312.4434 450.8296 l312.4434 452.4956 311.252 452.6636 310.5117 452.6636 c309.8672 452.6636 309.2227 452.5112 308.832 451.7534 c308.5645 452.397 307.8223 452.6636 307.1797 452.6636 c306.3555 452.6636 305.752 452.397 305.418 451.6421 c305.3887 451.6421 l305.3887 452.5239 l304.1699 452.5239 l304.2109 452.0337 304.2402 451.5454 304.2402 451.0532 c304.2402 445.4536 l305.3887 445.4536 l305.3887 450.2134 l305.3887 450.48 305.4434 450.9009 305.6543 451.2515 c305.8223 451.5171 306.2988 451.7261 306.6484 451.7261 c307.5723 451.7261 307.7656 451.0679 307.7656 450.354 c307.7656 445.4536 l308.916 445.4536 l308.916 445.4536 lf*u1 D315.6191 452.5239 m314.4727 452.5239 l314.4727 445.4536 l315.6191 445.4536 l315.6191 452.5239 l315.6191 452.5239 lf0 D314.4023 454.3306 m315.6914 454.3306 l315.6914 455.561 l314.4023 455.561 l314.4023 454.3306 l314.4023 454.3306 lf*U322.6875 445.4536 m322.6875 450.354 l322.6875 451.7534 322.3125 452.6636 320.7988 452.6636 c319.8867 452.6636 319.3574 452.4116 318.9082 451.6138 c318.8516 451.6138 l318.8516 452.5239 l317.6348 452.5239 l317.6758 452.0337 317.7031 451.5454 317.7031 451.0532 c317.7031 445.4536 l318.8516 445.4536 l318.8516 449.6411 l318.8516 450.6069 319.0352 451.7261 320.2949 451.7261 c321.2734 451.7261 321.541 451.1089 321.541 450.354 c321.541 445.4536 l322.6875 445.4536 l322.6875 445.4536 lf*u1 D325.8672 452.5239 m324.7188 452.5239 l324.7188 445.4536 l325.8672 445.4536 l325.8672 452.5239 l325.8672 452.5239 lf324.6484 454.3306 m325.9355 454.3306 l325.9355 455.561 l324.6484 455.561 l324.6484 454.3306 l324.6484 454.3306 lf*U0 D332.3906 447.4702 m332.3906 449.6245 328.8594 449.5981 328.8594 450.8442 c328.8594 451.4595 329.3359 451.7954 329.9512 451.7954 c330.6816 451.7954 331.0742 451.4038 331.0566 450.6626 c332.334 450.6626 l332.4316 452.062 331.3516 452.6636 330.0918 452.6636 c328.1055 452.6636 327.6563 451.4731 327.6563 450.7319 c327.6563 448.6177 331.1855 448.5894 331.1855 447.3296 c331.1855 446.6011 330.6523 446.2515 329.9688 446.2515 c328.8027 446.2515 328.791 447.2046 328.791 447.6099 c327.4883 447.6099 l327.4492 445.9858 328.3984 445.314 329.9258 445.314 c331.3223 445.314 332.3906 445.9165 332.3906 447.4702 c332.3906 447.4702 lf333.1563 452.5239 m333.1563 451.6558 l334.3164 451.6558 l334.3164 446.6294 l334.3164 445.8179 334.8066 445.3696 335.8984 445.3696 c336.2773 445.3696 336.6543 445.4536 337.0332 445.4829 c337.0332 446.3628 l336.7813 446.3354 336.5996 446.3071 336.5156 446.3071 c335.4668 446.3071 335.4668 446.8833 335.4668 447.3296 c335.4668 451.6558 l337.0039 451.6558 l337.0039 452.5239 l335.4668 452.5239 l335.4668 454.3989 l334.3164 453.8823 l334.3164 452.5239 l333.1563 452.5239 l333.1563 452.5239 lf*u339.1992 449.4858 m339.2129 451.4448 339.8145 451.7954 340.5449 451.7954 c341.3848 451.7954 341.957 451.5454 341.957 449.4858 c339.1992 449.4858 l339.1992 449.4858 lf1 D343.1758 448.6177 m343.1758 449.2202 l343.1758 451.5571 342.6738 452.6636 340.6563 452.6636 c338.2051 452.6636 337.9688 450.9565 337.9688 448.8843 c337.9688 445.7612 339.1582 445.314 340.6563 445.314 c342.1387 445.314 343.1055 446.0278 343.1191 447.5952 c341.8594 447.5952 l341.8164 446.8833 341.4141 446.2515 340.6289 446.2515 c339.7305 446.2515 339.1992 446.644 339.1992 448.6177 c343.1758 448.6177 l343.1758 448.6177 lf*U0 D346.0176 452.5239 m344.8711 452.5239 l344.8711 445.4536 l346.0176 445.4536 l346.0176 449.6245 l346.0176 450.5786 346.3398 451.5454 347.6152 451.5454 c347.8242 451.5454 348.0195 451.5015 348.2305 451.4731 c348.2305 452.6636 l347.1094 452.6636 346.5234 452.5386 346.0469 451.4595 c346.0176 451.4595 l346.0176 452.5239 l346.0176 452.5239 lf*u1 D350.6035 452.5239 m349.4531 452.5239 l349.4531 445.4536 l350.6035 445.4536 l350.6035 452.5239 l350.6035 452.5239 lf349.3848 454.3306 m350.6738 454.3306 l350.6738 455.561 l349.3848 455.561 l349.3848 454.3306 l349.3848 454.3306 lf*U0 D356.3672 447.8335 m356.3672 446.6577 355.5996 446.1958 354.9824 446.1958 c354.1699 446.1958 353.7793 446.771 353.7793 447.6226 c353.7793 452.5239 l352.6309 452.5239 l352.6309 447.1333 l352.6309 445.9302 353.3027 445.314 354.5352 445.314 c355.2773 445.314 355.9492 445.6636 356.3281 446.3071 c356.3672 446.3071 l356.3672 445.4536 l357.5879 445.4536 l357.543 445.9448 357.5176 446.4341 357.5176 446.9233 c357.5176 452.5239 l356.3672 452.5239 l356.3672 447.8335 l356.3672 447.8335 lf364.25 445.4536 m364.25 450.2134 l364.25 450.48 364.3066 451.1802 364.6426 451.4595 c364.9512 451.7114 365.0762 451.7261 365.5098 451.7261 c366.4355 451.7261 366.6309 451.0679 366.6309 450.354 c366.6309 445.4536 l367.7813 445.4536 l367.7813 450.8296 l367.7813 452.4956 366.5898 452.6636 365.8477 452.6636 c365.2031 452.6636 364.5605 452.5112 364.168 451.7534 c363.9004 452.397 363.1582 452.6636 362.5137 452.6636 c361.6895 452.6636 361.0859 452.397 360.752 451.6421 c360.7227 451.6421 l360.7227 452.5239 l359.5039 452.5239 l359.5488 452.0337 359.5742 451.5454 359.5742 451.0532 c359.5742 445.4536 l360.7227 445.4536 l360.7227 450.2134 l360.7227 450.48 360.7793 450.9009 360.9883 451.2515 c361.1563 451.5171 361.6328 451.7261 361.9844 451.7261 c362.9043 451.7261 363.1035 451.0679 363.1035 450.354 c363.1035 445.4536 l364.25 445.4536 l364.25 445.4536 lf0 O0 0.12 1 0.05 k249.2544 405.4531 m253.6831 405.4531 l253.6831 380.4512 l249.2544 380.4512 l249.2544 405.4531 l249.2544 405.4531 lf0 1 1 0 k249.2544 430.5405 m253.6831 430.5405 l253.6831 405.4531 l249.2544 405.4531 l249.2544 430.5405 l249.2544 430.5405 lf1 O0 0 0 1 k249.2544 455.4526 m253.6831 455.4526 l253.6831 430.4536 l249.2544 430.4536 l249.2544 455.4526 l249.2544 455.4526 lf*u1 D223.9644 430.4487 m223.9644 430.4487 l223.9644 430.4487 lf223.9653 430.438 m223.9653 430.438 l223.9653 430.438 lf223.9634 430.4351 m223.9634 430.4351 l223.9634 430.4351 lf223.9634 430.4536 m223.9634 430.4536 l223.9634 430.4536 lf235.439 451.2251 m235.439 452.6499 234.4028 453.7769 234.0386 454.0952 c233.7759 454.0356 l234.1636 453.562 234.8472 452.769 234.8472 451.7202 c234.8472 449.6538 232.6646 447.8589 230.1724 447.8257 c230.1919 447.6128 230.1899 447.4253 230.1899 447.2651 c230.1899 446.9702 230.1714 446.6812 230.1362 446.3999 c232.9634 446.4507 235.439 448.7495 235.439 451.2251 c235.439 451.2251 lf231.5405 434.1226 m230.3335 434.1226 230.0718 434.2495 229.7534 434.2495 c229.5493 434.2495 229.355 434.23 229.355 433.9399 c229.355 433.7388 229.5806 433.4458 229.7847 433.2925 c230.0688 433.5737 230.4585 433.6353 231.0874 433.6353 c231.3813 433.6353 231.7827 433.5776 231.9595 433.5542 c231.9351 433.3804 231.8999 433.1558 231.8999 432.8394 c231.8999 432.6733 231.9058 432.479 231.9058 432.2739 c231.9058 431.562 231.8013 431.1841 231.5532 430.8979 c231.6069 430.8647 231.7495 430.8354 231.8354 430.8354 c232.2974 430.8354 232.4155 431.0718 232.4155 432.271 c232.4155 432.6343 232.4448 432.9702 232.4448 433.0562 c233.0903 432.563 233.7495 431.6841 233.7495 431.0483 c233.9595 431.1567 234.2085 431.4761 234.2085 431.7144 c234.2085 432.1479 233.4849 432.7925 232.7163 433.5698 c232.8237 433.5962 233.1089 433.6772 233.3433 433.6772 c233.9458 433.6772 234.4341 433.5776 234.7173 433.2437 c234.8296 433.3647 234.9224 433.7329 234.9224 433.9399 c234.9224 434.3013 234.7153 434.2896 234.5649 434.2896 c233.9224 434.2896 233.1294 434.189 232.561 434.0952 c232.355 434.3706 231.0386 436.1509 230.6978 437.1011 c230.5991 437.1343 230.5229 437.1626 230.3618 437.1626 c230.0454 437.1626 229.9624 436.9419 229.8813 436.6392 c230.606 435.7593 231.3032 434.8022 231.5405 434.1226 c231.5405 434.1226 lf224.3354 436.6392 m224.2534 436.9419 224.1733 437.1626 223.856 437.1626 c223.6929 437.1626 223.6167 437.1343 223.521 437.1011 c223.1772 436.1509 221.8628 434.3706 221.6548 434.0952 c221.0894 434.189 220.2935 434.2896 219.6528 434.2896 c219.5015 434.2896 219.2944 434.3013 219.2944 433.9399 c219.2944 433.7329 219.3862 433.3647 219.5005 433.2437 c219.7827 433.5776 220.272 433.6772 220.8735 433.6772 c221.1099 433.6772 221.3931 433.5962 221.4995 433.5698 c220.7319 432.7925 220.0083 432.1479 220.0083 431.7144 c220.0083 431.4761 220.2573 431.1567 220.4683 431.0483 c220.4683 431.6841 221.1265 432.563 221.771 433.0562 c221.771 432.9702 221.8013 432.6343 221.8013 432.271 c221.8013 431.0718 221.9204 430.8354 222.3823 430.8354 c222.4663 430.8354 222.6089 430.8647 222.6646 430.8979 c222.4155 431.1841 222.311 431.562 222.311 432.2739 c222.311 432.479 222.3188 432.6733 222.3188 432.8394 c222.3188 433.1558 222.2817 433.3804 222.2573 433.5542 c222.4331 433.5776 222.8354 433.6353 223.1294 433.6353 c223.7583 433.6353 224.1479 433.5737 224.4331 433.2925 c224.6372 433.4458 224.8628 433.7388 224.8628 433.9399 c224.8628 434.23 224.6685 434.2495 224.4634 434.2495 c224.144 434.2495 223.8843 434.1226 222.6763 434.1226 c222.9136 434.8022 223.6099 435.7593 224.3354 436.6392 c224.3354 436.6392 lf219.3696 451.7202 m219.3696 452.769 220.0532 453.562 220.4399 454.0356 c220.1802 454.0952 l219.813 453.7769 218.7788 452.6499 218.7788 451.2251 c218.7788 448.7329 221.2886 446.4185 224.1421 446.3989 c224.1118 446.6694 224.0942 446.9565 224.0942 447.2651 c224.0942 447.4565 224.1021 447.646 224.1187 447.8237 c221.5962 447.8237 219.3696 449.6343 219.3696 451.7202 c219.3696 451.7202 lf227.0376 453.6401 m227.1685 453.939 227.3423 454.2944 227.3423 454.6851 c227.3423 455.7661 226.4458 456.2817 225.2456 456.2817 c224.6294 456.2817 224.3179 456.0825 224.3179 455.8823 c224.3179 455.6821 224.522 455.2427 224.6001 455.1069 c224.8218 455.2065 225.2231 455.3237 225.4546 455.3237 c226.2788 455.3237 226.894 454.3989 227.0376 453.6401 c227.0376 453.6401 lf0 D227.6274 455.0229 m228.3296 454.8862 228.8071 455.7827 228.1411 455.9419 c228.2329 455.647 227.7847 455.438 y227.6138 455.8335 227.8354 456.0591 v227.4263 456.2593 227.3237 456.0171 227.3159 455.7651 c227.4761 455.5503 227.5806 455.3003 227.6274 455.0229 c227.6274 455.0229 lf229.8989 448.8813 m230.0112 448.8745 230.1177 448.8687 230.23 448.8687 c232.2046 448.8687 234.1636 450.145 234.1636 451.7817 c234.1636 452.6548 233.771 453.2651 233.2856 453.9409 c233.0015 453.894 232.7427 453.8667 232.5386 453.8667 c231.644 453.8667 231.1587 454.3472 231.1235 454.8179 c231.1235 455.2417 231.4683 455.562 232.0034 455.562 c232.8335 455.562 234.3481 454.7847 235.8735 454.7847 c235.7241 454.6714 235.4741 454.5522 235.1733 454.439 c236.0679 453.6343 236.6646 452.5542 236.8931 451.4009 c239.2319 447.6587 l239.6235 447.0337 240.4546 445.8052 241.7056 444.8462 c240.1938 444.8462 239.189 444.8101 237.9106 446.8335 c236.7124 448.7515 l236.6245 448.5034 236.5142 448.2612 236.3862 448.0249 c238.77 444.2085 l239.1665 443.5776 239.9868 442.3579 241.2446 441.395 c239.731 441.395 238.73 441.3589 237.4497 443.3823 c235.3979 446.6675 l235.2446 446.5054 235.0825 446.3452 234.9116 446.1909 c237.8071 441.5571 l238.2065 440.9224 239.0239 439.7104 240.2827 438.7446 c238.77 438.7446 237.7671 438.7095 236.4868 440.7339 c233.6655 445.2495 l233.478 445.1313 233.2886 445.019 233.0933 444.9106 c236.5366 439.3979 l236.9341 438.7651 237.7515 437.5513 239.0112 436.5854 c237.4995 436.5854 236.4946 436.5503 235.2183 438.5737 c231.6704 444.2515 l231.4604 444.1694 231.2466 444.0942 231.0298 444.0249 c235.0396 437.6069 l235.4302 436.9858 236.2681 435.7534 237.5122 434.7964 c236.0005 434.7964 234.9966 434.7603 233.7192 436.7847 c229.4468 443.6226 l229.3159 443.5991 l229.1997 443.23 229.1196 442.8843 229.1196 442.5405 c229.1196 440.3921 230.5288 438.4946 232.2222 437.0298 c232.1128 436.9839 231.9243 436.9653 231.7495 436.9653 c231.4019 436.9653 231.1753 436.9858 231.0161 437.0132 c231.4097 436.1206 232.2515 434.9702 232.6772 434.3745 c233.231 434.4741 234.0376 434.5532 234.5649 434.5532 c235.1167 434.5532 235.1772 434.23 235.1772 433.9399 c235.1772 433.4399 234.9429 433.0366 234.6714 432.8149 c234.5698 433.0737 234.3638 433.4155 233.3433 433.4155 c233.2397 433.4116 l233.5396 433.0786 234.4722 432.3237 234.4722 431.7144 c234.4722 431.313 234.0308 430.7104 233.4478 430.7104 c233.4849 430.8394 233.478 430.9595 233.478 431.0483 c233.478 431.5405 233.0425 432.1167 232.6743 432.5181 c232.6841 432.3979 232.6792 432.4116 232.6792 432.271 c232.6792 431.1079 232.5747 430.5737 231.8354 430.5737 c231.4731 430.5737 231.2222 430.7729 231.1372 430.8315 c231.6157 431.2739 231.6421 431.6226 231.6421 432.2739 c231.6372 432.8394 l231.6362 432.9878 231.6392 433.1851 231.6616 433.3286 c231.397 433.3647 231.2925 433.3638 231.0874 433.3638 c230.0366 433.4468 229.7847 432.9019 v229.5005 433.1616 229.0874 433.5298 229.0874 433.9399 c229.0874 434.2085 229.2134 434.5132 229.7534 434.5132 c229.9585 434.5132 230.603 434.3862 231.1421 434.3862 c230.9976 434.7085 230.3521 435.6499 229.7954 436.3364 c229.7104 436.0718 229.5776 435.7827 229.2847 435.5493 c229.2446 435.9897 228.9868 437.3784 228.2993 438.1909 c228.2192 437.6421 228.1099 437.0786 228.1099 435.8911 c228.1099 432.9995 228.8062 430.8628 230.2827 430.4536 c230.0913 430.1187 229.6851 429.8179 229.2632 429.8179 c228.7231 429.8179 228.4292 430.4292 228.1284 431.0073 c227.9731 430.5796 227.5425 429.5396 227.1079 429.5396 c226.6763 429.5396 226.2446 430.5796 226.0884 431.0073 c225.7886 430.4292 225.4946 429.8179 224.9526 429.8179 c224.5327 429.8179 224.1255 430.1187 223.9351 430.4536 c225.4106 430.8628 226.1069 432.9995 226.1069 435.8911 c226.1069 437.0786 225.9985 437.6421 225.9175 438.1909 c225.231 437.3784 224.9722 435.9897 224.9321 435.5493 c224.6392 435.7827 224.5063 436.0718 224.4224 436.3364 c223.8647 435.6499 223.2202 434.7085 223.0747 434.3862 c223.6147 434.3862 224.2583 434.5132 224.4634 434.5132 c225.0034 434.5132 225.1313 434.2085 225.1313 433.9399 c225.1313 433.5298 224.7163 433.1616 224.4331 432.9019 c224.1802 433.4468 223.1294 433.3638 y222.9263 433.3638 222.8208 433.3647 222.5552 433.3286 c222.5776 433.1851 222.5825 432.9878 222.5786 432.8394 c222.5757 432.2739 l222.5757 431.6226 222.6001 431.2739 223.0806 430.8315 c222.9946 430.7729 222.7446 430.5737 222.3823 430.5737 c221.6421 430.5737 221.5366 431.1079 221.5366 432.271 c221.5366 432.4116 221.5327 432.3979 221.5435 432.5181 c221.1733 432.1167 220.7388 431.5405 220.7388 431.0483 c220.7388 430.9595 220.7329 430.8394 220.7681 430.7104 c220.187 430.7104 219.7456 431.313 219.7456 431.7144 c219.7456 432.3237 220.6792 433.0786 220.9771 433.4116 c220.8735 433.4155 l219.854 433.4155 219.647 433.0737 219.5454 432.8149 c219.2729 433.0366 219.0386 433.4399 219.0386 433.9399 c219.0386 434.23 219.1011 434.5532 219.6528 434.5532 c220.1812 434.5532 220.9868 434.4741 221.5405 434.3745 c221.9644 434.9702 222.8062 436.1206 223.1997 437.0132 c223.0415 436.9858 222.8169 436.9653 222.4673 436.9653 c222.2935 436.9653 222.103 436.9839 221.9966 437.0298 c223.688 438.4946 225.0972 440.3921 225.0972 442.5405 c225.0972 442.8843 225.0181 443.23 224.9009 443.5991 c224.772 443.6226 l220.4985 436.7847 l219.2202 434.7603 218.2173 434.7964 216.7056 434.7964 c217.9497 435.7534 218.7866 436.9858 219.1772 437.6069 c223.187 444.0249 l222.9702 444.0942 222.7583 444.1694 222.5474 444.2515 c219.0005 438.5737 l217.7212 436.5503 216.7173 436.5854 215.2065 436.5854 c216.4653 437.5513 217.2817 438.7651 217.6792 439.3979 c221.1245 444.9106 l220.9282 445.019 220.7378 445.1313 220.5513 445.2495 c217.729 440.7339 l216.4497 438.7095 215.4478 438.7446 213.9351 438.7446 c215.1938 439.7104 216.0122 440.9224 216.4097 441.5571 c219.3052 446.1909 l219.1343 446.3452 218.9722 446.5054 218.8198 446.6675 c216.7681 443.3823 l215.4878 441.3589 214.4849 441.395 212.9731 441.395 c214.229 442.3579 215.0503 443.5776 215.4478 444.2085 c217.8306 448.0249 l217.7036 448.2612 217.5942 448.5034 217.5044 448.7515 c216.3062 446.8335 l215.0278 444.8101 214.0239 444.8462 212.5132 444.8462 c213.7642 445.8052 214.5933 447.0337 214.9868 447.6587 c217.3247 451.4009 l217.5522 452.5542 218.1489 453.6343 219.0435 454.439 c218.7446 454.5522 218.4937 454.6714 218.3433 454.7847 c219.8696 454.7847 221.3823 455.561 222.2134 455.561 c222.7505 455.561 223.0933 455.2417 223.0933 454.8179 c223.0601 454.3472 222.5728 453.8667 221.6782 453.8667 c221.4751 453.8667 221.2153 453.894 220.9302 453.9409 c220.4458 453.2651 220.0532 452.6548 220.0532 451.7817 c220.0532 450.145 222.0122 448.8687 223.9888 448.8687 c224.1001 448.8687 224.2065 448.8745 224.3179 448.8813 c224.7095 450.2075 225.5425 451.0776 226.2085 451.9282 c225.4106 452.2192 224.521 452.9771 224.521 453.3198 c224.6216 453.3784 226.1509 452.8979 226.3091 452.855 c226.3413 452.8462 226.3745 452.8442 226.4106 452.855 c226.5972 452.9116 226.7524 453.1831 226.7524 453.2114 c226.5894 453.2378 225.6304 453.3628 224.9741 453.6011 c224.4761 453.7827 224.2241 454.1138 224.2241 454.2397 c224.3833 454.2651 224.9907 453.9468 225.8813 453.9468 c226.2104 453.9468 226.2749 453.9595 226.6021 453.9995 c226.3716 454.5464 225.9399 455.0093 225.4546 455.0093 c225.2583 455.0093 224.8315 454.8872 224.4741 454.7095 c224.2251 455.0952 224.0063 455.604 224.0063 455.8823 c224.0063 456.2095 224.3306 456.5942 225.2456 456.5942 c225.5015 456.5942 225.7407 456.5718 225.9634 456.5308 c226.1411 456.4976 226.2915 456.4575 226.4536 456.394 c226.4399 456.4155 226.4331 456.4644 226.4331 456.5093 c226.4331 456.6362 226.5474 456.77 226.978 456.77 c227.731 456.77 228.5024 456.5229 229.4497 456.5229 c229.6948 456.5229 229.8608 456.5308 230.0034 456.5903 c229.9419 456.4019 229.6763 456.1245 229.4321 455.8999 c229.5815 455.6929 229.9741 455.1978 229.9741 454.396 c229.9741 453.1079 229.1245 452.0454 229.1245 450.7437 c229.1245 449.9692 229.7202 449.2886 229.8989 448.8813 c229.8989 448.8813 lf*Uu*u0 O800 Ar265.5552 485.0815 m265.5552 485.8247 265.2485 486.228 264.4351 486.228 c264.1812 486.228 263.272 486.1841 263.272 484.8628 c263.272 482.7271 L263.272 481.3452 263.6733 480.9956 264.4351 480.9956 c265.0132 480.9956 265.397 481.1528 265.564 481.2749 c265.564 483.1655 L264.3999 483.1655 L264.3999 483.8647 L266.3687 483.8647 L266.3687 480.7935 L265.853 480.5132 265.2485 480.3218 264.4351 480.3218 c263.0962 480.3218 262.4487 481.0132 262.4487 482.7632 c262.4487 484.8364 L262.4487 486.0962 263.0962 486.9019 264.4351 486.9019 c265.8003 486.9019 266.4478 486.4019 266.395 485.0815 C265.5552 485.0815 lf*U*u267.8735 480.4526 m267.8735 486.77 L271.1284 486.77 L271.1284 486.0698 L268.6782 486.0698 L268.6782 484.0405 L270.9536 484.0405 L270.9536 483.3403 L268.6782 483.3403 L268.6782 481.1528 L271.1812 481.1528 L271.1812 480.4526 L267.8735 480.4526 lf*U*u272.188 480.4526 m272.188 486.77 L275.3198 486.77 L275.3198 486.0698 L272.9927 486.0698 L272.9927 484.0405 L275.1978 484.0405 L275.1978 483.3403 L272.9927 483.3403 L272.9927 480.4526 L272.188 480.4526 lf*U*u276.1069 482.7632 m276.1069 484.8364 L276.1069 486.0962 276.7544 486.9019 278.0942 486.9019 c279.4321 486.9019 280.0796 486.0962 280.0796 484.8364 c280.0796 482.7632 L280.0796 481.0132 279.4321 480.3218 278.0942 480.3218 c276.7544 480.3218 276.1069 481.0132 276.1069 482.7632 cf277.7437 487.5142 m276.9214 487.5142 L276.9214 488.4233 L277.7437 488.4233 L277.7437 487.5142 lf1 D279.2573 482.7271 m279.2573 484.8628 L279.2573 486.1841 278.3472 486.228 278.0942 486.228 c277.8403 486.228 276.9302 486.1841 276.9302 484.8628 c276.9302 482.7271 L276.9302 481.3452 277.3325 480.9956 278.0942 480.9956 c278.855 480.9956 279.2573 481.3452 279.2573 482.7271 cf279.2837 487.5142 m278.4614 487.5142 L278.4614 488.4233 L279.2837 488.4233 L279.2837 487.5142 lf*U*u0 D282.2671 483.3579 m282.2671 480.4526 L281.4624 480.4526 L281.4624 486.77 L283.6411 486.77 L284.7612 486.77 285.1548 485.9819 285.1548 485.1948 c285.1548 484.4517 284.7437 483.8823 283.9995 483.7515 c283.9995 483.7339 L284.7261 483.6206 284.9888 483.3745 285.0327 482.1069 c285.0405 481.8354 285.1284 480.8462 285.2505 480.4526 c284.4106 480.4526 L284.1831 480.8901 284.2358 481.7124 284.1665 482.5532 c284.105 483.3228 283.4829 483.3579 283.2124 483.3579 C282.2671 483.3579 lf1 D282.2671 484.0571 m283.4751 484.0571 L284.0522 484.0571 284.3325 484.5562 284.3325 485.1079 c284.3325 485.562 284.105 486.0698 283.4829 486.0698 c282.2671 486.0698 L282.2671 484.0571 lf*U*u0 D286.3618 486.77 m288.3052 486.77 L289.1099 486.77 289.688 486.481 290.0024 485.8081 c290.2563 485.2739 290.2827 484.0142 290.2827 483.813 c290.2827 482.4653 290.1597 481.686 289.897 481.2661 c289.5562 480.7241 288.9175 480.4526 287.8149 480.4526 c286.3618 480.4526 L286.3618 486.77 lf1 D287.1675 481.1528 m287.9282 481.1528 L289.0483 481.1528 289.4595 481.5728 289.4595 483.0425 c289.4595 484.3198 L289.4595 485.5981 289.0659 486.0698 288.2261 486.0698 c287.1675 486.0698 L287.1675 481.1528 lf*U*u0 D291.6909 480.4526 m291.6909 486.77 L294.9458 486.77 L294.9458 486.0698 L292.4956 486.0698 L292.4956 484.0405 L294.771 484.0405 L294.771 483.3403 L292.4956 483.3403 L292.4956 481.1528 L294.9985 481.1528 L294.9985 480.4526 L291.6909 480.4526 lf*U*u296.854 483.3579 m296.854 480.4526 L296.0483 480.4526 L296.0483 486.77 L298.2266 486.77 L299.3477 486.77 299.7402 485.9819 299.7402 485.1948 c299.7402 484.4517 299.3301 483.8823 298.5859 483.7515 c298.5859 483.7339 L299.3105 483.6206 299.5742 483.3745 299.6172 482.1069 c299.627 481.8354 299.7148 480.8462 299.8379 480.4526 c298.998 480.4526 L298.7695 480.8901 298.8223 481.7124 298.752 482.5532 c298.6914 483.3228 298.0684 483.3579 297.7983 483.3579 C296.854 483.3579 lf1 D296.854 484.0571 m298.0605 484.0571 L298.6387 484.0571 298.918 484.5562 298.918 485.1079 c298.918 485.562 298.6914 486.0698 298.0684 486.0698 c296.854 486.0698 L296.854 484.0571 lf*U*u0 D304.4746 486.77 m304.4746 486.0698 L302.8125 486.0698 L302.8125 480.4526 L302.0078 480.4526 L302.0078 486.0698 L300.3438 486.0698 L300.3438 486.77 L304.4746 486.77 lf*U*u309.4453 480.4526 m308.4824 480.4526 L306.6543 486.77 L307.5273 486.77 L308.9727 481.2134 L308.9883 481.2134 L310.4668 486.77 L311.291 486.77 L309.4453 480.4526 lf*U*u312.0879 482.7632 m312.0879 484.8364 L312.0879 486.0962 312.7344 486.9019 314.0742 486.9019 c315.4121 486.9019 316.0586 486.0962 316.0586 484.8364 c316.0586 482.7632 L316.0586 481.0132 315.4121 480.3218 314.0742 480.3218 c312.7344 480.3218 312.0879 481.0132 312.0879 482.7632 cf1 D315.2363 482.7271 m315.2363 484.8628 L315.2363 486.1841 314.3281 486.228 314.0742 486.228 c313.8203 486.228 312.9102 486.1841 312.9102 484.8628 c312.9102 482.7271 L312.9102 481.3452 313.3125 480.9956 314.0742 480.9956 c314.834 480.9956 315.2363 481.3452 315.2363 482.7271 cf*U*u0 D318.2207 480.4526 m317.4688 480.4526 L317.4688 486.77 L318.7715 486.77 L320.3633 481.4673 L320.3828 481.4673 L321.9922 486.77 L323.3223 486.77 L323.3223 480.4526 L322.5176 480.4526 L322.5176 486.0698 L322.498 486.0698 L320.7324 480.4526 L319.9707 480.4526 L318.2383 486.0698 L318.2207 486.0698 L318.2207 480.4526 lf*UUUU0 A-7894 480.4678 m8489 480.4678 L(N) *-7894 505.4688 m8489 505.4688 L(N) *227.1094 8612 m227.1094 -7771 L(N) *191.6719 8612 m191.6719 -7771 L(N) *-7894 355.4531 m8489 355.4531 L(N) *403.2031 8612 m403.2031 -7771 L(N) *LB%AI5_EndLayer--%%PageTrailergsave annotatepage grestore showpage%%TrailerAdobe_Illustrator_AI5 /terminate get execAdobe_shading_AI8 /terminate get execAdobe_ColorImage_AI6 /terminate get execAdobe_cshow /terminate get execAdobe_level2_AI5 /terminate get exec%%EOF