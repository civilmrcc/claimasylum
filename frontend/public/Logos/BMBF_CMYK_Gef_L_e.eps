%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 8.0%%AI8_CreatorVersion: 8%%For: (Robert S SIXPack) (SIXPack)%%Title: (BMBF_CMYK_Gef_L_e.eps)%%CreationDate: (11/22/04) (9:46 AM)%%BoundingBox: 193 355 390 506%%HiResBoundingBox: 193.2559 355.5068 389.1924 505.4766%%DocumentProcessColors: Magenta Yellow Black%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0%%+ procset Adobe_ColorImage_AI6 1.3 0%%+ procset Adobe_Illustrator_AI5 1.3 0%%+ procset Adobe_cshow 2.0 8%%+ procset Adobe_shading_AI8 1.0 0%AI5_FileFormat 4.0%AI3_ColorUsage: Color%AI3_IncludePlacedImages%AI7_ImageSettings: 1%%CMYKProcessColor: 1 1 1 1 ([Passermarken])%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set) %%+ Options: 1 16 0 1 0 1 1 1 0 1 1 1 1 8.504 0 0 0 0 0 0 0 0 131071 -1%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 0 0 () %AI3_TemplateBox: 297.5 420.5 297.5 420.5%AI3_TileBox: 29 31 567 812%AI3_DocumentPreview: Macintosh_ColorPic%AI5_ArtSize: 595 842%AI5_RulerUnits: 1%AI5_ArtFlags: 1 0 0 1 0 0 1 0 0%AI5_TargetResolution: 800%AI5_NumLayers: 1%AI8_OpenToView: -646 980 1 1905 1149 26 1 1 7 43 0 0%AI5_OpenViewLayers: 7%%PageOrigin:29 31%%AI3_PaperRect:-29 812 566 -30%%AI3_Margin:29 -31 -28 30%AI7_GridSettings: 28.3465 8 28.3465 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9%AI7_Thumbnail: 128 100 8%%BeginData: 5586 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FDFCFFFDFCFFFDFCFFFDFCFFFDFCFFFDFCFFFD46FFA827FF2727A8%FF27A8FFF8A852FF5252FF7D27FF52277D5227277DF852FFFF27275252A8%52A852F8277D7D527DF8527DFD50FFF87D7D277D52277D27A8F87D27A827%7D7D52A85227A8277D52A8527DF8FFFF2752527D2727FFFF7D7DA8525252%F87DFD51FFA827A8277DA852A8527D7D2727FF7DF8A852FF2727527D5252%7D7DA852A8FF275252FFF8A8FFFF52A87D52277DF87DA8FD50FFF8527D27%FFFF2727F8A8527DF87D27277DF8275227FFF87D52A85252F8FFFF2752F8%FF27FFFFFF7D7DA8527D52F87DFD51FF7D7DFF7DFFFFFF527DFFA8FF7DFF%7DA8FF7D7DFF7DFFA8A87D52A87DFFFFFF7D7DA8FF7DFFFFFFA8FFFD04A8%527DA8FDFCFFFDFCFFFDFCFFFDFCFFFDFCFFFDFCFFFDFCFFFD54FF7DA87D%FD79FFA852FF27F8F827FF7D7DFD09FFA87D52A8FD05FF7D527D7DFD07FF%7DFD0DFFA8A8FFFFA87DA8FFFFA852FF52FD05FFA87DFD36FF52F827A852%27F8F8A827F8F8FD08FF7DF8F852FD05FFF852527DFD07FF277DFD0CFF7D%52FFFFA8F852FFFFF8F8FF7DA8FD05FF7DFD05FF27FD30FFF827FFFF7D27%F827FFFF52F87DFD07FF52F8F87DFD05FFF8A8FFFFA85252A8FF7D5227A8%FF5252A8FF7D7DA87D527DFF527DFFFFA827F8FFA827F8FF7DFF7D7D52FF%A87DFF7D52FF7DF852A87D7D52FFFF7DFD27FF5227F8FFFFFFF8F827FFFF%52F827FD07FF52F8F852FD05FFF827277D277D52527D2752F87D52525227%FFF827A8F827F87D7D52FFFFA827F8A85252F8FF277D27F8277DA827A8F8%5227A8F8A852F852277D7D27FD26FFA8F8F85227A827F8F827A87D2727F8%7DFD06FF52F8F87DFD05FFF87DA8A8F8525227A827FFF8A827525227FFF8%FFFF5252F8A8527DFFFFA852527D27A8F8FF27A827A8A852A852A82727FF%FFF8FF7D52FF527D527DFD25FFA827F8F8F87D27FD04F8275252F8F8F8A8%FD05FF7DF8F852FD05FFF8A8FFFFF8FD047DF87DF87D27527D52FFF8FFA8%F852277D7D52FFFFA8277DF827FFF8FF277D277DA827A827FF7D7DF8FFF8%FF527DFFA8F8F8A8FD25FF52F827F8F8F852FD04F82727F827F82727FD05%FF52F8F87DFD05FFF87DFFFF52272752A8F827F8A85227F852FFF8FFFF52%52F8A8527DFFFF7D52FFF852FFF8FF27A827A87D52A8277DF82727FF2727%7D52FFFF2727FD25FFA82752FD0EF8275252FD04FF7DF8F852FD05FF7DFF%FFFFA87D7DFFFFA87DA8A8FF7D7DA8FF7DFFFFFF7DA8A85252FFFFFFA8FF%A8FFFFA8FFFD04A8FFA8FFA8FF7D7DA8FFFD04A8FFFF277DFD26FFA8F827%F827F827FD05F827F82727F87DFD05FF52F8F87DFD3DFFF8A8FD26FFF827%FD05F87DF8F82727FD04F827F87DFD04FF7DF8F852FD66FF2727F827F87D%52F8F8277DF8F827F827FD06FF52F8F87DFD0AFF7D7DFFFF5227277DFFFF%FF7DA8FD10FF7D7DFD3CFF7D5227F8F8277DFD04F85227F8F827277DFD05%FF52F8F852FD09FFA827A8FFFF2752A8A8FFFFFF27A8FD0EFFF8FFA8A8FD%3DFF7DF827F87D27FD05F8A8F827F852FD06FF52F8F87DFD05FF7D2752A8%27F87DFFFF27A8FFFFFF522727A852A8FF52FF7D5227FFA852277D52F827%7D7DFF275252FF275252FD36FF7DF852FF275227F852527DA8F852FD07FF%7DF8F852FD05FFF8FF277D7D27FFFFFF27F8F8277D277DF8A827A87D27FF%F87DF87D7D275227FFF8FF527D5252A8F8A827272752FD35FFA87D522727%5227F87DF852277DA8FD07FF52F8F87DFD04FFA8F8FF7D52A827FFFFFF27%A8FFFF5252FFF87D52A8A827FFF8FFFFFF7D27F852FFF8FF7D527D52FF27%A827A8A827FD37FF272752A8F8F87D7DF8F8A8FD08FF7DF8F852FD05FFF8%FF527D7D27FFFFFF277DFFFF7DF87DF8A8277D5227A8F8FF52A852277D27%FFF8FF527D5252FFF8A8277DA827FD37FF7D527D52F8F8527D5227FD09FF%52F8F87DFD05FF2727277DA827FFFFFF27272752A8F8F827A8FF272727FF%2727F8FFFF272752FF52F87D52A8F82727FF27A8A852FD3AFF7D7D7D52FD%0CFFC3FCFCBCFD06FFA8A8FD0BFFA8FD09FF7DFFFFFFA8FD04FFA8FFFFFF%A87DFD50FFBCFCFCC3FD7CFFBCFCFCBCFD7CFFBCFCFCC3FD10FFA852FFFF%FFF8F8F852FD1AFF52A8FD47FFC3FCFCBCFD10FFA827FFFFFFF8FF52F8FD%1AFF27A8FD47FFBCFCFCC3FD05FF52F827A8A8F8277DFF7DF8F827FFFFFF%F8FF5252FF2727F8FF7DF827FFA8272727FF7DF8F87DA8F8277D52F827A8%5227F852FD45FFC3FCFCBCFD05FF7D52F87D7DF87DF8A8277D2727FFFFFF%F8F8F87DFFF8A8525252277D7D5227FFF8A87D7DF8527DF87DA8F8FF27A8%27275227FD45FFBCFCFCC3FD05FF52F82752A827FF27A8F8A85252FFFFFF%F8FF5227A8F852277DA852F8A852272752A852F82752A827FFA852FFFFFF%52A8A827FD45FFC3FCFCBCFD05FFF87D277D7D27FF277DFD0427FFFFFFF8%FF7DF8FFF8A8527D525252277D27A827FFF87D527D7D27FFA8F8FF27A827%A87D27FD45FFBCFCFCC3FD05FFA8F82752A827FF27A87DF82752FFFFFFF8%FFFFF8FF52F8F8A87DF8F87DA827F852FFA8F82752A827FFFF27F827FF27%7DA827FD45FFBCFCFCBCFD7CFFBCFCFCC3FD7CFFC3FCFCBCFD7CFFBCFCFC%C3FD7CFFC3FCFCBCFD7CFFBCFCFCC3FD7CFFC8C0C099FD7CFFC8FEC6CEFD%7CFFCDA4C6C8FD7CFFC8FEC6CEFD7CFFCEA4C6C8FD7CFFC8C6C6CEFD7CFF%CEA4C6A6FD7CFFCDFEC6CEFD7CFFCEA4C6A6FD7CFFC8FEC6CEFD7CFFCDA4%C6C8FD7CFFC8FEC6CEFD7CFFCEA4C6C8FD7CFFC8C6C6CEFD7CFFCEA4C6A6%FD7CFFCDFEC6CEFD7CFFCEA4C6A6FDFCFFFDFCFFFDFCFFFDFCFFFDFCFFFD%FCFFFDFCFFFDFCFFFDFCFFFD7AFFFF%%EndData%%EndComments%%BeginProlog%%BeginResource: procset Adobe_level2_AI5 1.2 0%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)%%Version: 1.2 0%%CreationDate: (04/10/93) ()%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)userdict /Adobe_level2_AI5 26 dict dup begin	put	/packedarray where not	{		userdict begin		/packedarray		{			array astore readonly		} bind def		/setpacking /pop load def		/currentpacking false def	 end		0	} if	pop	userdict /defaultpacking currentpacking put true setpacking	/initialize	{		Adobe_level2_AI5 begin	} bind def	/terminate	{		currentdict Adobe_level2_AI5 eq		{		 end		} if	} bind def	mark	/setcustomcolor where not	{		/findcmykcustomcolor		{			(AI8_CMYK_CustomColor)			6 packedarray		} bind def		/findrgbcustomcolor		{			(AI8_RGB_CustomColor)			5 packedarray		} bind def		/setcustomcolor		{			exch 			aload pop dup			(AI8_CMYK_CustomColor) eq			{				pop pop				4				{					4 index mul					4 1 roll				} repeat				5 -1 roll pop				setcmykcolor			}			{				dup (AI8_RGB_CustomColor) eq				{					pop pop					3					{						1 exch sub						3 index mul 						1 exch sub						3 1 roll					} repeat					4 -1 roll pop					setrgbcolor				}				{					pop					4					{						4 index mul 4 1 roll					} repeat					5 -1 roll pop					setcmykcolor				} ifelse			} ifelse		}		def	} if	/setAIseparationgray	{		false setoverprint		0 setgray		/setseparationgray where{			pop setseparationgray		}{			/setcolorspace where{				pop				[/Separation (All) /DeviceCMYK {dup dup dup}] setcolorspace				1 exch sub setcolor			}{				setgray			}ifelse		}ifelse	} def		/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put	userdict /level2?	systemdict /languagelevel known dup	{		pop systemdict /languagelevel get 2 ge	} if	put/level2ScreenFreq{ begin		60		HalftoneType 1 eq		{			pop Frequency		} if		HalftoneType 2 eq		{			pop GrayFrequency		} if		HalftoneType 5 eq		{			pop Default level2ScreenFreq		} if end} bind defuserdict /currentScreenFreq  	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse putlevel2? not	{		/setcmykcolor where not		{			/setcmykcolor			{				exch .11 mul add exch .59 mul add exch .3 mul add				1 exch sub setgray			} def		} if		/currentcmykcolor where not		{			/currentcmykcolor			{				0 0 0 1 currentgray sub			} def		} if		/setoverprint where not		{			/setoverprint /pop load def		} if		/selectfont where not		{			/selectfont			{				exch findfont exch				dup type /arraytype eq				{					makefont				}				{					scalefont				} ifelse				setfont			} bind def		} if		/cshow where not		{			/cshow			{				[				0 0 5 -1 roll aload pop				] cvx bind forall			} bind def		} if	} if	cleartomark	/anyColor?	{		add add add 0 ne	} bind def	/testColor	{		gsave		setcmykcolor currentcmykcolor		grestore	} bind def	/testCMYKColorThrough	{		testColor anyColor?	} bind def	userdict /composite?	1 0 0 0 testCMYKColorThrough	0 1 0 0 testCMYKColorThrough	0 0 1 0 testCMYKColorThrough	0 0 0 1 testCMYKColorThrough	and and and	put	composite? not	{		userdict begin		gsave		/cyan? 1 0 0 0 testCMYKColorThrough def		/magenta? 0 1 0 0 testCMYKColorThrough def		/yellow? 0 0 1 0 testCMYKColorThrough def		/black? 0 0 0 1 testCMYKColorThrough def		grestore		/isCMYKSep? cyan? magenta? yellow? black? or or or def		/customColor? isCMYKSep? not def	 end	} if end defaultpacking setpacking%%EndResource%%BeginProcSet: Adobe_ColorImage_AI6 1.3 0userdict /Adobe_ColorImage_AI6 known not{	userdict /Adobe_ColorImage_AI6 53 dict put } ifuserdict /Adobe_ColorImage_AI6 get begin/initialize { 	Adobe_ColorImage_AI6 begin	Adobe_ColorImage_AI6 {		dup type /arraytype eq {			dup xcheck {				bind			} if		} if		pop pop	} forall} def/terminate { end } defcurrentdict /Adobe_ColorImage_AI6_Vars known not {	/Adobe_ColorImage_AI6_Vars 41 dict def} ifAdobe_ColorImage_AI6_Vars begin	/plateindex -1 def	/_newproc null def	/_proc1 null def	/_proc2 null def	/sourcearray 4 array def	/_ptispace null def	/_ptiname null def	/_pti0 0 def	/_pti1 0 def	/_ptiproc null def	/_ptiscale 0 def	/_pticomps 0 def	/_ptibuf 0 string def	/_gtigray 0 def	/_cticmyk null def	/_rtirgb null def	/XIEnable true def	/XIType 0 def	/XIEncoding 0 def	/XICompression 0 def	/XIChannelCount 0 def	/XIBitsPerPixel 0 def	/XIImageHeight 0 def	/XIImageWidth 0 def	/XIImageMatrix null def	/XIRowBytes 0 def	/XIFile null def	/XIBuffer1 null def	/XIBuffer2 null def	/XIBuffer3 null def	/XIDataProc null def	/XIColorSpace /DeviceGray def	/XIColorValues 0 def	/XIPlateList false defend/ci6colorimage /colorimage where {/colorimage get}{null} ifelse def/ci6image systemdict /image get def/ci6curtransfer systemdict /currenttransfer get def/ci6curoverprint /currentoverprint where {/currentoverprint get}{{_of}} ifelse def/ci6foureq {	4 index ne {		pop pop pop false	}{		4 index ne {			pop pop false		}{			4 index ne {				pop false			}{				4 index eq			} ifelse		} ifelse	} ifelse} def/ci6testplate {	Adobe_ColorImage_AI6_Vars begin		/plateindex -1 def		/setcmykcolor where {			pop			gsave			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub			grestore			1 0 0 0 ci6foureq { 				/plateindex 0 def			}{				0 1 0 0 ci6foureq { 					/plateindex 1 def				}{					0 0 1 0 ci6foureq {						/plateindex 2 def					}{						0 0 0 1 ci6foureq { 							/plateindex 3 def						}{							0 0 0 0 ci6foureq {								/plateindex 5 def							} if						} ifelse					} ifelse				} ifelse			} ifelse			pop pop pop pop		} if		plateindex end} def/ci6concatprocs {	/packedarray where {		pop dup type /packedarraytype eq 2 index type		/packedarraytype eq or	}{		false	} ifelse	{		/_proc2 exch cvlit def		/_proc1 exch cvlit def		_proc1 aload pop		_proc2 aload pop		_proc1 length		_proc2 length add		packedarray cvx	}{		/_proc2 exch cvlit def		/_proc1 exch cvlit def		/_newproc _proc1 length _proc2 length add array def		_newproc 0 _proc1 putinterval		_newproc _proc1 length _proc2 putinterval		_newproc cvx	} ifelse} def/ci6istint {	type /arraytype eq } def/ci6isspot {	dup type /arraytype eq {		dup length 1 sub get /Separation eq	}{		pop false	} ifelse} def/ci6spotname {	dup ci6isspot {dup length 2 sub get}{pop ()} ifelse} def/ci6altspace {	aload pop pop pop ci6colormake} def/ci6numcomps {	dup /DeviceGray eq {		pop 1	}{		dup /DeviceRGB eq {			pop 3		}{			/DeviceCMYK eq {				4			}{				1			} ifelse		} ifelse	} ifelse} def/ci6marksplate {	dup /DeviceGray eq {		pop plateindex 3 eq	}{		dup /DeviceRGB eq {			pop plateindex 5 ne		}{			dup /DeviceCMYK eq {				pop plateindex 5 ne			}{				dup ci6isspot {					/findcmykcustomcolor where {						pop						dup length 2 sub get						0.1 0.1 0.1 0.1 5 -1 roll						findcmykcustomcolor 1 setcustomcolor						systemdict /currentgray get exec						1 ne					}{						pop plateindex 5 ne					} ifelse				}{					pop plateindex 5 ne				} ifelse			} ifelse		} ifelse	} ifelse} def/ci6colormake {	dup ci6numcomps	exch 1 index 2 add 1 roll	dup 1 eq {pop}{array astore} ifelse	exch} def/ci6colorexpand {	dup ci6spotname exch	dup ci6istint {		ci6altspace		exch 4 1 roll	}{		1 3 1 roll	} ifelse} def/ci6colortint {	dup /DeviceGray eq {		3 1 roll 1 exch sub mul 1 exch sub exch	}{		dup /DeviceRGB eq {			3 1 roll {1 exch sub 1 index mul 1 exch sub exch} forall pop 3 array astore exch		}{			dup /DeviceCMYK eq {				3 1 roll {1 index mul exch} forall pop 4 array astore exch			}{				3 1 roll mul exch			} ifelse		} ifelse	} ifelse} def/ci6colortocmyk {	dup /DeviceGray eq {		pop 1 exch sub 0 0 0 4 -1 roll 4 array astore	}{		dup /DeviceRGB eq {			pop aload pop _rgbtocmyk 4 array astore		}{			dup /DeviceCMYK eq {				pop			}{				ci6altspace ci6colortint ci6colortocmyk			} ifelse		} ifelse	} ifelse} def/ci6makeimagedict {	7 dict begin		/ImageType 1 def		/Decode exch def		/DataSource exch def		/ImageMatrix exch def		/BitsPerComponent exch def		/Height exch def		/Width exch def	currentdict end} def/ci6stringinvert {	0 1 2 index length 1 sub {		dup 2 index exch get 255 exch sub 2 index 3 1 roll put	} for} def/ci6stringknockout {	0 1 2 index length 1 sub {		255 2 index 3 1 roll put	} for} def/ci6stringapply {	0 1 4 index length 1 sub {		dup		4 index exch get		3 index 3 1 roll		3 index exec	} for	pop exch pop} def/ci6walkrgbstring {	0 3 index	dup length 1 sub 0 3 3 -1 roll {		3 getinterval {} forall		5 index exec		3 index	} for		 5 {pop} repeat} def/ci6walkcmykstring{	0 3 index	dup length 1 sub 0 4 3 -1 roll {		4 getinterval {} forall				6 index exec				3 index			} for		5 { pop } repeat	} def/ci6putrgbtograystr{	.11 mul exch		.59 mul add exch		.3 mul add		cvi 3 copy put		pop 1 add} def/ci6putcmyktograystr{	exch .11 mul add		exch .59 mul add		exch .3 mul add		dup 255 gt { pop 255 } if		255 exch sub cvi 3 copy put		pop 1 add} def/ci6rgbtograyproc {		Adobe_ColorImage_AI6_Vars begin 		sourcearray 0 get exec		XIBuffer3		dup 3 1 roll 				/ci6putrgbtograystr load exch		ci6walkrgbstring end} def/ci6cmyktograyproc {		Adobe_ColorImage_AI6_Vars begin		sourcearray 0 get exec		XIBuffer3		dup 3 1 roll 				/ci6putcmyktograystr load exch		ci6walkcmykstring end} def/ci6separatecmykproc {		Adobe_ColorImage_AI6_Vars begin		sourcearray 0 get exec				XIBuffer3				0 2 index				plateindex 4 2 index length 1 sub {			get 255 exch sub						3 copy put pop 1 add						2 index		} for		pop pop exch pop end} def	/ci6compositeimage {	dup 1 eq {		pop pop image	}{		/ci6colorimage load null ne {			ci6colorimage		}{			3 1 roll pop			sourcearray 0 3 -1 roll put			3 eq {/ci6rgbtograyproc}{/ci6cmyktograyproc} ifelse load			image		} ifelse	} ifelse} def/ci6knockoutimage {	gsave	0 ci6curtransfer exec 1 ci6curtransfer exec	eq {		0 ci6curtransfer exec 0.5 lt	}{		0 ci6curtransfer exec 1 ci6curtransfer exec gt	} ifelse	{{pop 0}}{{pop 1}} ifelse	systemdict /settransfer get exec	ci6compositeimage	grestore} def/ci6drawimage {	ci6testplate -1 eq {		pop ci6compositeimage	}{		dup type /arraytype eq {			dup length plateindex gt {plateindex get}{pop false} ifelse		}{			{				true			}{				dup 1 eq {plateindex 3 eq}{plateindex 3 le} ifelse			} ifelse		} ifelse		{			dup 1 eq {				pop pop ci6image			}{				dup 3 eq {					ci6compositeimage				}{					pop pop					sourcearray 0 3 -1 roll put					/ci6separatecmykproc load					ci6image				} ifelse			} ifelse		}{			ci6curoverprint {				7 {pop} repeat			}{				ci6knockoutimage			} ifelse		} ifelse	} ifelse} def/ci6proctintimage {	/_ptispace exch store /_ptiname exch store /_pti1 exch store /_pti0 exch store /_ptiproc exch store	/_pticomps _ptispace ci6numcomps store	/_ptiscale _pti1 _pti0 sub store	level2? {		_ptiname length 0 gt version cvr 2012 ge and {			[/Separation _ptiname _ptispace {_ptiproc}] setcolorspace			[_pti0 _pti1] ci6makeimagedict ci6image		}{			[/Indexed _ptispace 255 {255 div _ptiscale mul _pti0 add _ptiproc}] setcolorspace			[0 255] ci6makeimagedict ci6image		} ifelse	}{		_pticomps 1 eq {			{				dup				{					255 div _ptiscale mul _pti0 add _ptiproc 255 mul cvi put				} ci6stringapply			} ci6concatprocs ci6image		}{			{				dup length _pticomps mul dup _ptibuf length ne {/_ptibuf exch string store}{pop} ifelse				_ptibuf {					exch _pticomps mul exch 255 div _ptiscale mul _pti0 add _ptiproc					_pticomps 2 add -2 roll					_pticomps 1 sub -1 0 {						1 index add 2 index exch						5 -1 roll						255 mul cvi put					} for					pop pop				} ci6stringapply			} ci6concatprocs false _pticomps			/ci6colorimage load null eq {7 {pop} repeat}{ci6colorimage} ifelse		} ifelse	} ifelse} def/ci6graytintimage {	/_gtigray 5 -1 roll store	{1 _gtigray sub mul 1 exch sub} 4 1 roll	/DeviceGray ci6proctintimage} def/ci6cmyktintimage {	/_cticmyk 5 -1 roll store	{_cticmyk {1 index mul exch} forall pop} 4 1 roll	/DeviceCMYK ci6proctintimage} def/ci6rgbtintimage {	/_rtirgb 5 -1 roll store	{_rtirgb {1 exch sub 1 index mul 1 exch sub exch} forall pop} 4 1 roll	/DeviceRGB ci6proctintimage} def/ci6tintimage {	ci6testplate -1 eq {		ci6colorexpand		3 -1 roll 5 -1 roll {0}{0 exch} ifelse 4 2 roll		dup /DeviceGray eq {			pop ci6graytintimage		}{			dup /DeviceRGB eq {				pop ci6rgbtintimage			}{				pop ci6cmyktintimage			} ifelse		} ifelse	}{		dup ci6marksplate {			plateindex 5 lt {				ci6colortocmyk plateindex get				dup 0 eq ci6curoverprint and {					7 {pop} repeat				}{					1 exch sub					exch {1 0}{0 1} ifelse () ci6graytintimage				} ifelse			}{				pop exch {0}{0 exch} ifelse 0 3 1 roll () ci6graytintimage			} ifelse		}{			ci6curoverprint {				8 {pop} repeat			}{				pop pop pop				{pop 1} 0 1 () /DeviceGray ci6proctintimage			} ifelse		} ifelse	} ifelse} def/XINullImage {} def/XIImageMask {	XIImageWidth XIImageHeight false	[XIImageWidth 0 0 XIImageHeight neg 0 0]	/XIDataProc load	imagemask} def/XIImageTint {	XIImageWidth XIImageHeight XIBitsPerPixel	[XIImageWidth 0 0 XIImageHeight neg 0 0]	/XIDataProc load	XIType 3 eq XIColorValues XIColorSpace ci6tintimage} def/XIImage {	XIImageWidth XIImageHeight XIBitsPerPixel	[XIImageWidth 0 0 XIImageHeight neg 0 0]	/XIDataProc load	false XIChannelCount XIPlateList ci6drawimage} def/XG {	pop pop} def/XF {	13 {pop} repeat} def/Xh {	Adobe_ColorImage_AI6_Vars begin		gsave		/XIType exch def		/XIImageHeight exch def		/XIImageWidth exch def		/XIImageMatrix exch def		0 0 moveto		XIImageMatrix concat		XIImageWidth XIImageHeight scale				/_lp /null ddef		_fc		/_lp /imagemask ddef end} def/XH {	Adobe_ColorImage_AI6_Vars begin		grestore end} def/XIEnable {	Adobe_ColorImage_AI6_Vars /XIEnable 3 -1 roll put} def/XC {	Adobe_ColorImage_AI6_Vars begin		ci6colormake		/XIColorSpace exch def		/XIColorValues exch def end} def/XIPlates {	Adobe_ColorImage_AI6_Vars begin		/XIPlateList exch def end} def/XI{	Adobe_ColorImage_AI6_Vars begin		gsave		/XIType exch def		cvi dup		256 idiv /XICompression exch store		256 mod /XIEncoding exch store		pop pop		/XIChannelCount exch def		/XIBitsPerPixel exch def		/XIImageHeight exch def		/XIImageWidth exch def		pop pop pop pop		/XIImageMatrix exch def		XIBitsPerPixel 1 eq {			XIImageWidth 8 div ceiling cvi		}{			XIImageWidth XIChannelCount mul		} ifelse		/XIRowBytes exch def		XIEnable {			/XIBuffer3 XIImageWidth string def			XICompression 0 eq {				/XIBuffer1 XIRowBytes string def				XIEncoding 0 eq {					{currentfile XIBuffer1 readhexstring pop}				}{					{currentfile XIBuffer1 readstring pop}				} ifelse			}{				/XIBuffer1 256 string def				/XIBuffer2 XIRowBytes string def				{currentfile XIBuffer1 readline pop (%) anchorsearch {pop} if}				/ASCII85Decode filter /DCTDecode filter				/XIFile exch def				{XIFile XIBuffer2 readstring pop}			} ifelse			/XIDataProc exch def						XIType 1 ne {				0 setgray			} if			XIType 1 eq {				XIImageMask			}{				XIType 2 eq XIType 3 eq or {					XIImageTint				}{					XIImage				} ifelse			} ifelse		}{			XINullImage		} ifelse		/XIPlateList false def		grestore end} defend%%EndProcSet%%BeginResource: procset Adobe_Illustrator_AI5 1.3 0%%Title: (Adobe Illustrator (R) Version 8.0 Full Prolog)%%Version: 1.3 0%%CreationDate: (3/7/1994) ()%%Copyright: ((C) 1987-1998 Adobe Systems Incorporated All Rights Reserved)currentpacking true setpackinguserdict /Adobe_Illustrator_AI5_vars 112 dict dup beginput/_?cmyk false def/_eo false def/_lp /none def/_pf{} def/_ps{} def/_psf{} def/_pss{} def/_pjsf{} def/_pjss{} def/_pola 0 def/_doClip 0 def/cf currentflat def/_lineorientation 0 def/_charorientation 0 def/_yokoorientation 0 def/_tm matrix def/_renderStart[/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0] def/_renderEnd[null null null null /i1 /i1 /i1 /i1] def/_render -1 def/_shift [0 0] def/_ax 0 def/_ay 0 def/_cx 0 def/_cy 0 def/_leading[0 0] def/_ctm matrix def/_mtx matrix def/_sp 16#020 def/_hyphen (-) def/_fontSize 0 def/_fontAscent 0 def/_fontDescent 0 def/_fontHeight 0 def/_fontRotateAdjust 0 def/Ss 256 string defSs 0 (fonts/) putinterval/_cnt 0 def/_scale [1 1] def/_nativeEncoding 0 def/_useNativeEncoding 0 def/_tempEncode 0 def/_pntr 0 def/_tDict 2 dict def/_hfname 100 string def/_hffound false def/Tx{} def/Tj{} def/CRender{} def/_AI3_savepage{} def/_gf null def/_cf 4 array def/_rgbf 3 array def/_if null def/_of false def/_fc{} def/_gs null def/_cs 4 array def/_rgbs 3 array def/_is null def/_os false def/_sc{} def/_pd 1 dict def/_ed 15 dict def/_pm matrix def/_fm null def/_fd null def/_fdd null def/_sm null def/_sd null def/_sdd null def/_i null def/_lobyte 0 def/_hibyte 0 def/_cproc null def/_cscript 0 def/_hvax 0 def/_hvay 0 def/_hvwb 0 def/_hvcx 0 def/_hvcy 0 def/_bitfont null def/_bitlobyte 0 def/_bithibyte 0 def/_bitkey null def/_bitdata null def/_bitindex 0 def/discardSave null def/buffer 256 string def/beginString null def/endString null def/endStringLength null def/layerCnt 1 def/layerCount 1 def/perCent (%) 0 get def/perCentSeen? false def/newBuff null def/newBuffButFirst null def/newBuffLast null def/clipForward? false defenduserdict /Adobe_Illustrator_AI5 known not {	userdict /Adobe_Illustrator_AI5 100 dict put} ifuserdict /Adobe_Illustrator_AI5 get begin/initialize{	Adobe_Illustrator_AI5 dup begin	Adobe_Illustrator_AI5_vars begin	/_aicmykps where {pop /_?cmyk _aicmykps def}if	discardDict	{		bind pop pop	} forall	dup /nc get begin	{		dup xcheck 1 index type /operatortype ne and		{			bind		} if		pop pop	} forall end	newpath} def/terminate{ end end} def/_null def/ddef{	Adobe_Illustrator_AI5_vars 3 1 roll put} def/xput{	dup load dup length exch maxlength eq	{		dup dup load dup		length 2 mul dict copy def	} if	load begin	def end} def/npop{	{		pop	} repeat} def/hswj{	dup stringwidth 3 2 roll	{		_hvwb eq { exch _hvcx add exch _hvcy add } if		exch _hvax add exch _hvay add	} cforall} def/vswj{	0 0 3 -1 roll	{		dup 255 le		_charorientation 1 eq		and		{			dup cstring stringwidth 5 2 roll			_hvwb eq { exch _hvcy sub exch _hvcx sub } if			exch _hvay sub exch _hvax sub			4 -1 roll sub exch			3 -1 roll sub exch		}		{			_hvwb eq { exch _hvcy sub exch _hvcx sub } if			exch _hvay sub exch _hvax sub			_fontHeight sub		} ifelse	} cforall} def/swj{	6 1 roll	/_hvay exch ddef	/_hvax exch ddef	/_hvwb exch ddef	/_hvcy exch ddef	/_hvcx exch ddef	_lineorientation 0 eq { hswj } { vswj } ifelse} def/sw{	0 0 0 6 3 roll swj} def/vjss{	4 1 roll	{		dup cstring		dup length 1 eq		_charorientation 1 eq		and		{			-90 rotate			currentpoint			_fontRotateAdjust add			moveto			gsave			false charpath currentpoint			5 index setmatrix stroke			grestore			_fontRotateAdjust sub			moveto			_sp eq			{				5 index 5 index rmoveto			} if			2 copy rmoveto			90 rotate		}		{			currentpoint			_fontHeight sub			5 index sub			3 index _sp eq			{				9 index sub			} if				currentpoint			exch 4 index stringwidth pop 2 div sub			exch _fontAscent sub			moveto				gsave			2 index false charpath			6 index setmatrix stroke			grestore				moveto pop pop		} ifelse	} cforall	6 npop} def/hjss{	4 1 roll	{		dup cstring		gsave		false charpath currentpoint		5 index setmatrix stroke		grestore		moveto		_sp eq		{			5 index 5 index rmoveto		} if		2 copy rmoveto	} cforall	6 npop} def/jss{	_lineorientation 0 eq { hjss } { vjss } ifelse} def/ss{	0 0 0 7 3 roll jss} def/vjsp{	4 1 roll	{		dup cstring		dup length 1 eq		_charorientation 1 eq		and		{			-90 rotate			currentpoint			_fontRotateAdjust add			moveto			false charpath            currentpoint			_fontRotateAdjust sub			moveto			_sp eq			{				5 index 5 index rmoveto			} if			2 copy rmoveto			90 rotate		}		{			currentpoint			_fontHeight sub			5 index sub			3 index _sp eq			{				9 index sub			} if				currentpoint			exch 4 index stringwidth pop 2 div sub			exch _fontAscent sub			moveto				2 index false charpath				moveto pop pop		} ifelse	} cforall	6 npop} def/hjsp{    4 1 roll    {        dup cstring        false charpath        _sp eq        {            5 index 5 index rmoveto        } if        2 copy rmoveto    } cforall    6 npop} def/jsp{	matrix currentmatrix    _lineorientation 0 eq {hjsp} {vjsp} ifelse} def/sp{    matrix currentmatrix    0 0 0 7 3 roll    _lineorientation 0 eq {hjsp} {vjsp} ifelse} def/pl{	transform	0.25 sub round 0.25 add exch	0.25 sub round 0.25 add exch	itransform} def/setstrokeadjust where{	pop true setstrokeadjust	/c	{		curveto	} def	/C	/c load def	/v	{		currentpoint 6 2 roll curveto	} def	/V	/v load def	/y	{		2 copy curveto	} def	/Y	/y load def	/l	{		lineto	} def	/L	/l load def	/m	{		moveto	} def}{	/c	{		pl curveto	} def	/C	/c load def	/v	{		currentpoint 6 2 roll pl curveto	} def	/V	/v load def	/y	{		pl 2 copy curveto	} def	/Y	/y load def	/l	{		pl lineto	} def	/L	/l load def	/m	{		pl moveto	} def} ifelse/d{	setdash} def/cf{} def/i{	dup 0 eq	{		pop cf	} if	setflat} def/j{	setlinejoin} def/J{	setlinecap} def/M{	setmiterlimit} def/w{	setlinewidth} def/XR{	0 ne	/_eo exch ddef} def/H{} def/h{	closepath} def/N{	_pola 0 eq	{		_doClip 1 eq		{			_eo {eoclip} {clip} ifelse /_doClip 0 ddef		} if		newpath	}	{		/CRender		{			N		} ddef	} ifelse} def/n{	N} def/F{	_pola 0 eq	{		_doClip 1 eq		{			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc			/_doClip 0 ddef		}		{			_pf		} ifelse	}	{		/CRender		{			F		} ddef	} ifelse} def/f{	closepath	F} def/S{	_pola 0 eq	{		_doClip 1 eq		{			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc			/_doClip 0 ddef		}		{			_ps		} ifelse	}	{		/CRender		{			S		} ddef	} ifelse} def/s{	closepath	S} def/B{	_pola 0 eq	{		_doClip 1 eq		gsave F grestore		{			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc			/_doClip 0 ddef		}		{			S		} ifelse	}	{		/CRender		{			B		} ddef	} ifelse} def/b{	closepath	B} def/W{	/_doClip 1 ddef} def/*{	count 0 ne	{		dup type /stringtype eq		{			pop		} if	} if	newpath} def/u{} def/U{} def/q{	_pola 0 eq	{		gsave	} if} def/Q{	_pola 0 eq	{		grestore	} if} def/*u{	_pola 1 add /_pola exch ddef} def/*U{	_pola 1 sub /_pola exch ddef	_pola 0 eq	{		CRender	} if} def/D{	pop} def/*w{} def/*W{} def/`{	/_i save ddef	clipForward?	{		nulldevice	} if	6 1 roll 4 npop	concat pop	userdict begin	/showpage	{	} def	0 setgray	0 setlinecap	1 setlinewidth	0 setlinejoin	10 setmiterlimit	[] 0 setdash	/setstrokeadjust where {pop false setstrokeadjust} if	newpath	0 setgray	false setoverprint} def/~{ end	_i restore} def/_rgbtocmyk{	3	{		1 exch sub 3 1 roll	} repeat	3 copy 1 4 1 roll	3	{		3 index 2 copy gt		{			exch		} if		pop 4 1 roll	} repeat	pop pop pop	4 1 roll	3	{		3 index sub		3 1 roll	} repeat	4 -1 roll} def/setrgbfill{	_rgbf astore pop	/_fc	{		_lp /fill ne		{			_of setoverprint			_rgbf aload pop setrgbcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		hvashow	} ddef	/_pjsf	{		_fc		hvawidthshow	} ddef	/_lp /none ddef} def/setrgbstroke{	_rgbs astore pop	/_sc	{		_lp /stroke ne		{			_os setoverprint			_rgbs aload pop setrgbcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/O{	0 ne	/_of exch ddef	/_lp /none ddef} def/R{	0 ne	/_os exch ddef	/_lp /none ddef} def/g{	/_gf exch ddef	/_fc	{		_lp /fill ne		{			_of setoverprint			_gf setgray			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		hvashow	} ddef	/_pjsf	{		_fc		hvawidthshow	} ddef	/_lp /none ddef} def/G{	/_gs exch ddef	/_sc	{		_lp /stroke ne		{			_os setoverprint			_gs setgray			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/k{	_cf astore pop	/_fc	{		_lp /fill ne		{			_of setoverprint			_cf aload pop setcmykcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		hvashow	} ddef	/_pjsf	{		_fc		hvawidthshow	} ddef	/_lp /none ddef} def/K{	_cs astore pop	/_sc	{		_lp /stroke ne		{			_os setoverprint			_cs aload pop setcmykcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/Xa{	_?cmyk {		3 npop k	}{		setrgbfill 4 npop	} ifelse} def/XA{	_?cmyk {		3 npop K	}{		setrgbstroke 4 npop	} ifelse} def/Xs{	/_gf exch ddef	5 npop	/_fc	{		_lp /fill ne		{			_of setoverprint			_gf setAIseparationgray			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		hvashow	} ddef	/_pjsf	{		_fc		hvawidthshow	} ddef	/_lp /none ddef} def/XS{	/_gs exch ddef	5 npop	/_sc	{		_lp /stroke ne		{			_os setoverprint			_gs setAIseparationgray			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/Xx{	exch	/_gf exch ddef	0 eq {		findcmykcustomcolor	}{		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse		{			4 1 roll 3 npop			findcmykcustomcolor		}{			8 -4 roll 4 npop			findrgbcustomcolor		} ifelse	} ifelse	/_if exch ddef	/_fc	{		_lp /fill ne		{			_of setoverprint			_if _gf 1 exch sub setcustomcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		hvashow	} ddef	/_pjsf	{		_fc		hvawidthshow	} ddef	/_lp /none ddef} def/XX{	exch	/_gs exch ddef	0 eq {		findcmykcustomcolor	}{		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse		{			4 1 roll 3 npop			findcmykcustomcolor		}{			8 -4 roll 4 npop			findrgbcustomcolor		} ifelse	} ifelse	/_is exch ddef	/_sc	{		_lp /stroke ne		{			_os setoverprint			_is _gs 1 exch sub setcustomcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/x{	/_gf exch ddef	findcmykcustomcolor	/_if exch ddef	/_fc	{		_lp /fill ne		{			_of setoverprint			_if _gf 1 exch sub setcustomcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		hvashow	} ddef	/_pjsf	{		_fc		hvawidthshow	} ddef	/_lp /none ddef} def/X{	/_gs exch ddef	findcmykcustomcolor	/_is exch ddef	/_sc	{		_lp /stroke ne		{			_os setoverprint			_is _gs 1 exch sub setcustomcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/XK{	3 -1 roll pop	0 eq	{		1 exch sub		3 {dup 3 1 roll mul 5 1 roll} repeat		mul 4 1 roll		K	}	{		1 exch sub 4 1 roll		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat		4 -1 roll pop		XA	} ifelse} def/Xk{	3 -1 roll pop	0 eq	{		1 exch sub		3 {dup 3 1 roll mul 5 1 roll} repeat		mul 4 1 roll		k	}	{		1 exch sub 4 1 roll		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat		4 -1 roll pop		Xa	} ifelse} def/A{	pop} def/annotatepage{userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse} def/XT {	pop pop} def/Xt {	pop} def/discard{	save /discardSave exch store	discardDict begin	/endString exch store	gt38?	{		2 add	} if	load	stopped	pop end	discardSave restore} bind defuserdict /discardDict 7 dict dup beginput/pre38Initialize{	/endStringLength endString length store	/newBuff buffer 0 endStringLength getinterval store	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store} def/shiftBuffer{	newBuff 0 newBuffButFirst putinterval	newBuffLast 0	currentfile read not	{	stop	} if	put} def0{	pre38Initialize	mark	currentfile newBuff readstring exch pop	{		{			newBuff endString eq			{				cleartomark stop			} if			shiftBuffer		} loop	}	{	stop	} ifelse} def1{	pre38Initialize	/beginString exch store	mark	currentfile newBuff readstring exch pop	{		{			newBuff beginString eq			{				/layerCount dup load 1 add store			}			{				newBuff endString eq				{					/layerCount dup load 1 sub store					layerCount 0 eq					{						cleartomark stop					} if				} if			} ifelse			shiftBuffer		} loop	} if} def2{	mark	{		currentfile buffer {readline} stopped {			% assume error was due to overfilling the buffer		}{			not			{				stop			} if			endString eq {				cleartomark stop			} if		}ifelse	} loop} def3{	/beginString exch store	/layerCnt 1 store	mark	{		currentfile buffer {readline} stopped {			% assume error was due to overfilling the buffer		}{			not			{				stop			} if			dup beginString eq			{				pop /layerCnt dup load 1 add store			}			{				endString eq				{					layerCnt 1 eq					{						cleartomark stop					}					{						/layerCnt dup load 1 sub store					} ifelse				} if			} ifelse		}ifelse	} loop} defenduserdict /clipRenderOff 15 dict dup beginput{	/n /N /s /S /f /F /b /B}{	{		_doClip 1 eq		{			/_doClip 0 ddef _eo {eoclip} {clip} ifelse		} if		newpath	} def} forall/Tr /pop load def/Bb {} def/BB /pop load def/Bg {12 npop} def/Bm {6 npop} def/Bc /Bm load def/Bh {4 npop} defend/Lb{	6 npop	7 2 roll	5 npop	0 eq	{		0 eq		{			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard		}		{						/clipForward? true def						/Tx /pop load def			/Tj /pop load def						currentdict end clipRenderOff begin begin		} ifelse	}	{		0 eq		{			save /discardSave exch store		} if	} ifelse} bind def/LB{	discardSave dup null ne	{		restore	}	{		pop		clipForward?		{			currentdict		 end		 end		 begin								/clipForward? false ddef		} if	} ifelse} bind def/Pb{	pop pop	0 (%AI5_EndPalette) discard} bind def/Np{	0 (%AI5_End_NonPrinting--) discard} bind def/Ln /pop load def/Ap/pop load def/Ar{	72 exch div	0 dtransform dup mul exch dup mul add sqrt	dup 1 lt	{		pop 1	} if	setflat} def/Mb{	q} def/Md{} def/MB{	Q} def/nc 4 dict defnc begin/setgray{	pop} bind def/setcmykcolor{	4 npop} bind def/setrgbcolor{	3 npop} bind def/setcustomcolor{	2 npop} bind defcurrentdict readonly popend/XP{	4 npop} bind def/XD{	pop} bind defendsetpacking%%EndResource%%BeginResource: procset Adobe_cshow 2.0 8%%Title: (Writing System Operators)%%Version: 2.0 8%%CreationDate: (1/23/89) ()%%Copyright: ((C) 1992-1996 Adobe Systems Incorporated All Rights Reserved)currentpacking true setpackinguserdict /Adobe_cshow 14 dict dup begin put/initialize{	Adobe_cshow begin	Adobe_cshow	{		dup xcheck		{			bind		} if		pop pop	} forall end	Adobe_cshow begin} def/terminate{currentdict Adobe_cshow eq	{ end	} if} def/cforall{	/_lobyte 0 ddef	/_hibyte 0 ddef	/_cproc exch ddef	/_cscript currentfont /FontScript known { currentfont /FontScript get } { -1 } ifelse ddef	{		/_lobyte exch ddef		_hibyte 0 eq		_cscript 1 eq		_lobyte 129 ge _lobyte 159 le and		_lobyte 224 ge _lobyte 252 le and or and		_cscript 2 eq		_lobyte 161 ge _lobyte 254 le and and		_cscript 3 eq		_lobyte 161 ge _lobyte 254 le and and    	_cscript 25 eq		_lobyte 161 ge _lobyte 254 le and and    	_cscript -1 eq		or or or or and		{			/_hibyte _lobyte ddef		}		{			_hibyte 256 mul _lobyte add			_cproc			/_hibyte 0 ddef		} ifelse	} forall} def/cstring{	dup 256 lt	{		(s) dup 0 4 3 roll put	}	{		dup 256 idiv exch 256 mod		(hl) dup dup 0 6 5 roll put 1 4 3 roll put	} ifelse} def/clength{	0 exch	{ 256 lt { 1 } { 2 } ifelse add } cforall} def/hawidthshow{	{		dup cstring		show		_hvax _hvay rmoveto		_hvwb eq { _hvcx _hvcy rmoveto } if	} cforall} def/vawidthshow{	{		dup 255 le		_charorientation 1 eq		and		{			-90 rotate			0 _fontRotateAdjust rmoveto			cstring			_hvcx _hvcy _hvwb _hvax _hvay 6 -1 roll awidthshow			0 _fontRotateAdjust neg rmoveto			90 rotate		}		{			currentpoint			_fontHeight sub			exch _hvay sub exch _hvax sub			2 index _hvwb eq { exch _hvcy sub exch _hvcx sub } if			3 2 roll			cstring			dup stringwidth pop 2 div neg _fontAscent neg rmoveto			show			moveto		} ifelse	} cforall} def/hvawidthshow{	6 1 roll	/_hvay exch ddef	/_hvax exch ddef	/_hvwb exch ddef	/_hvcy exch ddef	/_hvcx exch ddef	_lineorientation 0 eq { hawidthshow } { vawidthshow } ifelse} def/hvwidthshow{	0 0 3 -1 roll hvawidthshow} def/hvashow{	0 0 0 6 -3 roll hvawidthshow} def/hvshow{	0 0 0 0 0 6 -1 roll hvawidthshow} defcurrentdict readonly pop endsetpacking%%EndResource%%BeginResource: procset Adobe_shading_AI8 1.0 0%%Title: (Adobe Illustrator 8 Shading Procset)%%Version: 1.0 0%%CreationDate: (12/17/97) ()%%Copyright: ((C) 1987-1997 Adobe Systems Incorporated All Rights Reserved)userdict /defaultpacking currentpacking put true setpackinguserdict /Adobe_shading_AI8 10 dict dup begin put/initialize {	Adobe_shading_AI8 begin	Adobe_shading_AI8 bdprocs	Mesh /initialize get exec} def/terminate {	currentdict Adobe_shading_AI8 eq {	 end	} if} def/bdprocs {	{		dup xcheck 1 index type /arraytype eq and {			bind		} if		pop pop	} forall} def/X! {pop} def/X# {pop pop} def/Mesh 40 dict defMesh begin/initialize {	Mesh bdprocs	Mesh begin		/emulate? /AI8MeshEmulation where {			pop AI8MeshEmulation		}{			systemdict /shfill known not		} ifelse def end} def/bd {	shadingdict begin} def/paint {	emulate? {	 end	}{		/_lp /none ddef _fc /_lp /none ddef				/AIColorSpace AIColorSpace tocolorspace store		/ColorSpace AIColorSpace topsspace store				version_ge_3010.106 not systemdict /setsmoothness known and {			0.0001 setsmoothness		} if				composite? {			/DataSource getdatasrc def			Matrix concat			currentdict end			shfill		}{			AIColorSpace makesmarks AIPlateList markingplate and not isoverprint and {			 end			}{				/ColorSpace /DeviceGray store				/Decode [0 1 0 1 0 1] store				/DataSource getplatesrc def				Matrix concat				currentdict end				shfill			} ifelse		} ifelse	} ifelse} def/shadingdict 12 dict defshadingdict begin	/ShadingType 6 def	/BitsPerCoordinate 16 def	/BitsPerComponent 8 def	/BitsPerFlag 8 defend/datafile null def/databuf 256 string def/dataptr 0 def/srcspace null def/srcchannels 0 def/dstchannels 0 def/dstplate 0 def/srctodstcolor null def/getplatesrc {	/srcspace AIColorSpace store	/srcchannels AIColorSpace getnchannels store	/dstchannels 1 store	/dstplate getplateindex store	/srctodstcolor srcspace makesmarks {		dstplate 4 eq {			{1 exch sub}		}{			{srcspace tocmyk 3 dstplate sub index 1 exch sub 5 1 roll 4 {pop} repeat}		} ifelse	}{		{srcchannels {pop} repeat 1}	} ifelse store	/datafile getdatasrc store	/rdpatch168 load DataLength () /SubFileDecode filter} def/getdatasrc {	/rdcmntline load /ASCII85Decode filter} def/rdpatch168 {	/dataptr 0 store	49 rdcount	4 {		dup {pop srcchannels getint8} if		dup {pop srctodstcolor dstchannels putint8 true} if	} repeat	{databuf 0 dataptr getinterval}{()} ifelse} def/rdpatch3216 {	/dataptr 0 store	97 rdcount	4 {		dup {pop srcchannels getint16} if		dup {pop srctodstcolor dstchannels putint16 true} if	} repeat	{databuf 0 dataptr getinterval}{()} ifelse} def/rdcount {	dup 0 gt {		datafile databuf dataptr 4 -1 roll getinterval readstring		exch length dataptr add /dataptr exch store	}{		true	} ifelse} def/getint8 {	mark true 3 -1 roll	{		dup {pop datafile read} if		dup {pop 255 div true} if	} repeat	{		counttomark 1 add -1 roll pop true	}{		cleartomark false	} ifelse} def/putint8 {	dup dataptr add /dataptr exch store	dataptr exch	{		1 sub exch		255 mul cvi		databuf 2 index		3 -1 roll put	} repeat	pop} def /getint16 {	mark true 3 -1 roll	{		dup {pop datafile read} if		dup {pop 256 mul datafile read} if		dup {pop add 65535 div true} if	} repeat	{		counttomark 1 add -1 roll pop true	}{		cleartomark false	} ifelse} def/putint16 {	dup 2 mul dataptr add /dataptr exch store	dataptr exch	{		2 sub exch		65535 mul cvi dup		256 idiv databuf 3 index 3 -1 roll put		256 mod databuf 2 index 1 add 3 -1 roll put	} repeat	pop} def /srcbuf 256 string def/rdcmntline {	currentfile srcbuf readline pop	(%) anchorsearch {pop} if} def/getplateindex {	0 [cyan? magenta? yellow? black? customColor?] {{exit} if 1 add} forall} def/aicsarray 4 array def/aicsaltvals 4 array def/aicsaltcolr aicsaltvals def/tocolorspace {	dup type /arraytype eq {		mark exch aload pop		aicsarray 0 3 -1 roll put		aicsarray 1 3 -1 roll put		dup aicsarray 2 3 -1 roll put		gettintxform aicsarray 3 3 -1 roll put		counttomark aicsaltvals 0 3 -1 roll getinterval /aicsaltcolr exch store		aicsaltcolr astore pop pop		aicsarray	} if} def/subtintxform {aicsaltcolr {1 index mul exch} forall pop} def/addtintxform {aicsaltcolr {1 sub 1 index mul 1 add exch} forall pop} def/gettintxform {	/DeviceRGB eq {/addtintxform}{/subtintxform} ifelse load} def/getnchannels {	dup type /arraytype eq {0 get} if	colorspacedict exch get begin Channels end} def/makesmarks {	composite? {		pop true	}{		dup dup type /arraytype eq {0 get} if		colorspacedict exch get begin MarksPlate end	} ifelse} def/markingplate {	composite? {		pop true	}{		dup type /arraytype eq {			dup length getplateindex gt {getplateindex get}{pop false} ifelse		} if	} ifelse} def/tocmyk {	dup dup type /arraytype eq {0 get} if	colorspacedict exch get begin ToCMYK end} def/topsspace {	dup dup type /arraytype eq {0 get} if	colorspacedict exch get begin ToPSSpace end} def/colorspacedict 5 dict dup begin	/DeviceGray 4 dict dup begin		/Channels 1 def		/MarksPlate {pop black?} def		/ToCMYK {pop 1 exch sub 0 0 0 4 -1 roll} def		/ToPSSpace {} def end def	/DeviceRGB 4 dict dup begin		/Channels 3 def		/MarksPlate {pop isCMYKSep?} def		/ToCMYK {pop _rgbtocmyk} def		/ToPSSpace {} def end def	/DeviceCMYK 4 dict dup begin		/Channels 4 def		/MarksPlate {pop isCMYKSep?} def		/ToCMYK {pop} def		/ToPSSpace {} def end def	/Separation 4 dict dup begin		/Channels 1 def		/MarksPlate {			/findcmykcustomcolor where {				pop dup 1 exch ToCMYK 5 -1 roll 1 get				findcmykcustomcolor 1 setcustomcolor				systemdict /currentgray get exec				1 ne			}{				pop false			} ifelse		} def		/ToCMYK {			dup 2 get mark exch 4 2 roll			3 get exec			counttomark -1 roll tocmyk			5 -1 roll pop		} def		/ToPSSpace {} def end def	/Process 4 dict dup begin		/Channels 1 def		/MarksPlate {			isCMYKSep? {				1 exch ToCMYK 4 array astore getplateindex get 0 ne 			}{				pop false			} ifelse		} def		/ToCMYK {			dup 2 get mark exch 4 2 roll			3 get exec			counttomark -1 roll tocmyk			5 -1 roll pop		} def		/ToPSSpace {			4 array copy dup 0 /Separation put		} def end defend def/isoverprint {	/currentoverprint where {pop currentoverprint}{_of} ifelse} def/version_ge_3010.106 {   version {cvr} stopped {      pop      false   }{      3010.106 ge   } ifelse} defendenddefaultpacking setpacking%%EndResource%%EndProlog%%BeginSetupuserdict /_useSmoothShade false putuserdict /_aicmykps true putuserdict /_forceToCMYK true putAdobe_level2_AI5 /initialize get execAdobe_cshow /initialize get execAdobe_ColorImage_AI6 /initialize get execAdobe_shading_AI8 /initialize get execAdobe_Illustrator_AI5 /initialize get exec%AI5_BeginPalette0 0 Pb1 1 1 1 ([Passermarken]) 0 Xs([Passermarken]) Pc1 1 1 1 k(C=100 M=100 Y=100 K=100) Pc(C=100 M=100 Y=100 K=100) Pc(C=100 M=100 Y=100 K=100) Pc0 0 0 0 k(Neues Farbfeld 4) PcPB%AI5_EndPalette%AI5_Begin_NonPrintingNp%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp%AI8_PluginGroupInfo(Adobe Path Blends) (Adobe Angleichungen-Zusatzmodul) (Angleichungen)%AI8_PluginGroupInfo(Adobe PatternOnPath Brush Tool) (Adobe Musterpinsel-Zusatzmodul) (Bildpinsel-Werkzeug)%AI8_PluginGroupInfo(Adobe ArtOnPath Brush Tool) (Adobe Bildpinsel-Zusatzmodul) (Bildpinsel-Werkzeug)%AI8_PluginGroupInfo(Adobe Calligraphic Brush Tool) (R\237ckg\212ngig: Neuer Kalligraphiepinsel) (Kalligraphiepinsel-Werkzeug)%AI8_PluginGroupInfo(Adobe Scatter Brush Tool) (Adobe Spezialpinsel-Zusatzmodul) (Spezialpinsel-Werkzeug)%AI5_End_NonPrinting--%%EndSetup%AI5_BeginLayer1 1 1 1 0 0 1 1 255 79 79 0 100 Lb(Ebene 2) Ln0 Au1 Ap0 O0 0 0 0 k800 Ar0 J 0 j 1 w 4 M []0 d%AI3_Note:0 D0 XR389.1924 355.5068 m193.2559 355.5068 L193.2559 505.4766 L389.1924 505.4766 L389.1924 355.5068 Lfu0 Ap0 1 1 0 k300 Ar250.7959 430.5615 m255.2246 430.5615 l255.2246 405.4736 l250.7959 405.4736 l250.7959 430.5615 l250.7959 430.5615 lf0 0.12 1 0.05 k250.7959 405.4736 m255.2246 405.4736 l255.2246 380.4727 l250.7959 380.4727 l250.7959 405.4736 l250.7959 405.4736 lf1 O0 0 0 1 k250.7959 455.4736 m255.2246 455.4736 l255.2246 430.4746 l250.7959 430.4746 l250.7959 455.4736 l250.7959 455.4736 lf*u225.5059 430.4697 m225.5059 430.4697 l225.5059 430.4697 lf1 D225.5068 430.459 m225.5068 430.459 l225.5068 430.459 lf225.5049 430.4561 m225.5049 430.4561 l225.5049 430.4561 lf225.5049 430.4746 m225.5049 430.4746 l225.5049 430.4746 lf236.9805 451.2461 m236.9805 452.6709 235.9443 453.7979 235.5801 454.1162 c235.3174 454.0566 l235.7051 453.583 236.3887 452.79 236.3887 451.7412 c236.3887 449.6748 234.2061 447.8799 231.7139 447.8467 c231.7334 447.6338 231.7314 447.4463 231.7314 447.2861 c231.7314 446.9912 231.7129 446.7021 231.6777 446.4209 c234.5049 446.4717 236.9805 448.7705 236.9805 451.2461 c236.9805 451.2461 lf233.082 434.1436 m231.875 434.1436 231.6133 434.2705 231.2949 434.2705 c231.0908 434.2705 230.8965 434.251 230.8965 433.9609 c230.8965 433.7598 231.1221 433.4668 231.3262 433.3135 c231.6104 433.5947 232 433.6563 232.6289 433.6563 c232.9229 433.6563 233.3242 433.5986 233.501 433.5752 c233.4766 433.4014 233.4414 433.1768 233.4414 432.8604 c233.4414 432.6943 233.4473 432.5 233.4473 432.2949 c233.4473 431.583 233.3428 431.2051 233.0947 430.9189 c233.1484 430.8857 233.291 430.8564 233.377 430.8564 c233.8389 430.8564 233.957 431.0928 233.957 432.292 c233.957 432.6553 233.9863 432.9912 233.9863 433.0771 c234.6318 432.584 235.291 431.7051 235.291 431.0693 c235.501 431.1777 235.75 431.4971 235.75 431.7354 c235.75 432.1689 235.0264 432.8135 234.2578 433.5908 c234.3652 433.6172 234.6504 433.6982 234.8848 433.6982 c235.4873 433.6982 235.9756 433.5986 236.2588 433.2646 c236.3711 433.3857 236.4639 433.7539 236.4639 433.9609 c236.4639 434.3223 236.2568 434.3105 236.1064 434.3105 c235.4639 434.3105 234.6709 434.21 234.1025 434.1162 c233.8965 434.3916 232.5801 436.1719 232.2393 437.1221 c232.1406 437.1553 232.0645 437.1836 231.9033 437.1836 c231.5869 437.1836 231.5039 436.9629 231.4229 436.6602 c232.1475 435.7803 232.8447 434.8232 233.082 434.1436 c233.082 434.1436 lf225.877 436.6602 m225.7949 436.9629 225.7148 437.1836 225.3975 437.1836 c225.2344 437.1836 225.1582 437.1553 225.0625 437.1221 c224.7188 436.1719 223.4043 434.3916 223.1963 434.1162 c222.6309 434.21 221.835 434.3105 221.1943 434.3105 c221.043 434.3105 220.8359 434.3223 220.8359 433.9609 c220.8359 433.7539 220.9277 433.3857 221.042 433.2646 c221.3242 433.5986 221.8135 433.6982 222.415 433.6982 c222.6514 433.6982 222.9346 433.6172 223.041 433.5908 c222.2734 432.8135 221.5498 432.1689 221.5498 431.7354 c221.5498 431.4971 221.7988 431.1777 222.0098 431.0693 c222.0098 431.7051 222.668 432.584 223.3125 433.0771 c223.3125 432.9912 223.3428 432.6553 223.3428 432.292 c223.3428 431.0928 223.4619 430.8564 223.9238 430.8564 c224.0078 430.8564 224.1504 430.8857 224.2061 430.9189 c223.957 431.2051 223.8525 431.583 223.8525 432.2949 c223.8525 432.5 223.8604 432.6943 223.8604 432.8604 c223.8604 433.1768 223.8232 433.4014 223.7988 433.5752 c223.9746 433.5986 224.377 433.6563 224.6709 433.6563 c225.2998 433.6563 225.6895 433.5947 225.9746 433.3135 c226.1787 433.4668 226.4043 433.7598 226.4043 433.9609 c226.4043 434.251 226.21 434.2705 226.0049 434.2705 c225.6855 434.2705 225.4258 434.1436 224.2178 434.1436 c224.4551 434.8232 225.1514 435.7803 225.877 436.6602 c225.877 436.6602 lf220.9111 451.7412 m220.9111 452.79 221.5947 453.583 221.9814 454.0566 c221.7217 454.1162 l221.3545 453.7979 220.3203 452.6709 220.3203 451.2461 c220.3203 448.7539 222.8301 446.4395 225.6836 446.4199 c225.6533 446.6904 225.6357 446.9775 225.6357 447.2861 c225.6357 447.4775 225.6436 447.667 225.6602 447.8447 c223.1377 447.8447 220.9111 449.6553 220.9111 451.7412 c220.9111 451.7412 lf228.5791 453.6611 m228.71 453.96 228.8838 454.3154 228.8838 454.7061 c228.8838 455.7871 227.9873 456.3027 226.7871 456.3027 c226.1709 456.3027 225.8594 456.1035 225.8594 455.9033 c225.8594 455.7031 226.0635 455.2637 226.1416 455.1279 c226.3633 455.2275 226.7646 455.3447 226.9961 455.3447 c227.8203 455.3447 228.4355 454.4199 228.5791 453.6611 c228.5791 453.6611 lf0 D229.1689 455.0439 m229.8711 454.9072 230.3486 455.8037 229.6826 455.9629 c229.7744 455.668 229.3262 455.459 y229.1553 455.8545 229.377 456.0801 v228.9678 456.2803 228.8652 456.0381 228.8574 455.7861 c229.0176 455.5713 229.1221 455.3213 229.1689 455.0439 c229.1689 455.0439 lf231.4404 448.9023 m231.5527 448.8955 231.6592 448.8896 231.7715 448.8896 c233.7461 448.8896 235.7051 450.166 235.7051 451.8027 c235.7051 452.6758 235.3125 453.2861 234.8271 453.9619 c234.543 453.915 234.2842 453.8877 234.0801 453.8877 c233.1855 453.8877 232.7002 454.3682 232.665 454.8389 c232.665 455.2627 233.0098 455.583 233.5449 455.583 c234.375 455.583 235.8896 454.8057 237.415 454.8057 c237.2656 454.6924 237.0156 454.5732 236.7148 454.46 c237.6094 453.6553 238.2061 452.5752 238.4346 451.4219 c240.7734 447.6797 l241.165 447.0547 241.9961 445.8262 243.2471 444.8672 c241.7354 444.8672 240.7305 444.8311 239.4521 446.8545 c238.2539 448.7725 l238.166 448.5244 238.0557 448.2822 237.9277 448.0459 c240.3115 444.2295 l240.708 443.5986 241.5283 442.3789 242.7861 441.416 c241.2725 441.416 240.2715 441.3799 238.9912 443.4033 c236.9395 446.6885 l236.7861 446.5264 236.624 446.3662 236.4531 446.2119 c239.3486 441.5781 l239.748 440.9434 240.5654 439.7314 241.8242 438.7656 c240.3115 438.7656 239.3086 438.7305 238.0283 440.7549 c235.207 445.2705 l235.0195 445.1523 234.8301 445.04 234.6348 444.9316 c238.0781 439.4189 l238.4756 438.7861 239.293 437.5723 240.5527 436.6064 c239.041 436.6064 238.0361 436.5713 236.7598 438.5947 c233.2119 444.2725 l233.002 444.1904 232.7881 444.1152 232.5713 444.0459 c236.5811 437.6279 l236.9717 437.0068 237.8096 435.7744 239.0537 434.8174 c237.542 434.8174 236.5381 434.7813 235.2607 436.8057 c230.9883 443.6436 l230.8574 443.6201 l230.7412 443.251 230.6611 442.9053 230.6611 442.5615 c230.6611 440.4131 232.0703 438.5156 233.7637 437.0508 c233.6543 437.0049 233.4658 436.9863 233.291 436.9863 c232.9434 436.9863 232.7168 437.0068 232.5576 437.0342 c232.9512 436.1416 233.793 434.9912 234.2188 434.3955 c234.7725 434.4951 235.5791 434.5742 236.1064 434.5742 c236.6582 434.5742 236.7188 434.251 236.7188 433.9609 c236.7188 433.4609 236.4844 433.0576 236.2129 432.8359 c236.1113 433.0947 235.9053 433.4365 234.8848 433.4365 c234.7813 433.4326 l235.0811 433.0996 236.0137 432.3447 236.0137 431.7354 c236.0137 431.334 235.5723 430.7314 234.9893 430.7314 c235.0264 430.8604 235.0195 430.9805 235.0195 431.0693 c235.0195 431.5615 234.584 432.1377 234.2158 432.5391 c234.2256 432.4189 234.2207 432.4326 234.2207 432.292 c234.2207 431.1289 234.1162 430.5947 233.377 430.5947 c233.0146 430.5947 232.7637 430.7939 232.6787 430.8525 c233.1572 431.2949 233.1836 431.6436 233.1836 432.2949 c233.1787 432.8604 l233.1777 433.0088 233.1807 433.2061 233.2031 433.3496 c232.9385 433.3857 232.834 433.3848 232.6289 433.3848 c231.5781 433.4678 231.3262 432.9229 v231.042 433.1826 230.6289 433.5508 230.6289 433.9609 c230.6289 434.2295 230.7549 434.5342 231.2949 434.5342 c231.5 434.5342 232.1445 434.4072 232.6836 434.4072 c232.5391 434.7295 231.8936 435.6709 231.3369 436.3574 c231.252 436.0928 231.1191 435.8037 230.8262 435.5703 c230.7861 436.0107 230.5283 437.3994 229.8408 438.2119 c229.7607 437.6631 229.6514 437.0996 229.6514 435.9121 c229.6514 433.0205 230.3477 430.8838 231.8242 430.4746 c231.6328 430.1396 231.2266 429.8389 230.8047 429.8389 c230.2646 429.8389 229.9707 430.4502 229.6699 431.0283 c229.5146 430.6006 229.084 429.5605 228.6494 429.5605 c228.2178 429.5605 227.7861 430.6006 227.6299 431.0283 c227.3301 430.4502 227.0361 429.8389 226.4941 429.8389 c226.0742 429.8389 225.667 430.1396 225.4766 430.4746 c226.9521 430.8838 227.6484 433.0205 227.6484 435.9121 c227.6484 437.0996 227.54 437.6631 227.459 438.2119 c226.7725 437.3994 226.5137 436.0107 226.4736 435.5703 c226.1807 435.8037 226.0479 436.0928 225.9639 436.3574 c225.4063 435.6709 224.7617 434.7295 224.6162 434.4072 c225.1563 434.4072 225.7998 434.5342 226.0049 434.5342 c226.5449 434.5342 226.6729 434.2295 226.6729 433.9609 c226.6729 433.5508 226.2578 433.1826 225.9746 432.9229 c225.7217 433.4678 224.6709 433.3848 y224.4678 433.3848 224.3623 433.3857 224.0967 433.3496 c224.1191 433.2061 224.124 433.0088 224.1201 432.8604 c224.1172 432.2949 l224.1172 431.6436 224.1416 431.2949 224.6221 430.8525 c224.5361 430.7939 224.2861 430.5947 223.9238 430.5947 c223.1836 430.5947 223.0781 431.1289 223.0781 432.292 c223.0781 432.4326 223.0742 432.4189 223.085 432.5391 c222.7148 432.1377 222.2803 431.5615 222.2803 431.0693 c222.2803 430.9805 222.2744 430.8604 222.3096 430.7314 c221.7285 430.7314 221.2871 431.334 221.2871 431.7354 c221.2871 432.3447 222.2207 433.0996 222.5186 433.4326 c222.415 433.4365 l221.3955 433.4365 221.1885 433.0947 221.0869 432.8359 c220.8145 433.0576 220.5801 433.4609 220.5801 433.9609 c220.5801 434.251 220.6426 434.5742 221.1943 434.5742 c221.7227 434.5742 222.5283 434.4951 223.082 434.3955 c223.5059 434.9912 224.3477 436.1416 224.7412 437.0342 c224.583 437.0068 224.3584 436.9863 224.0088 436.9863 c223.835 436.9863 223.6445 437.0049 223.5381 437.0508 c225.2295 438.5156 226.6387 440.4131 226.6387 442.5615 c226.6387 442.9053 226.5596 443.251 226.4424 443.6201 c226.3135 443.6436 l222.04 436.8057 l220.7617 434.7813 219.7588 434.8174 218.2471 434.8174 c219.4912 435.7744 220.3281 437.0068 220.7188 437.6279 c224.7285 444.0459 l224.5117 444.1152 224.2998 444.1904 224.0889 444.2725 c220.542 438.5947 l219.2627 436.5713 218.2588 436.6064 216.748 436.6064 c218.0068 437.5723 218.8232 438.7861 219.2207 439.4189 c222.666 444.9316 l222.4697 445.04 222.2793 445.1523 222.0928 445.2705 c219.2705 440.7549 l217.9912 438.7305 216.9893 438.7656 215.4766 438.7656 c216.7354 439.7314 217.5537 440.9434 217.9512 441.5781 c220.8467 446.2119 l220.6758 446.3662 220.5137 446.5264 220.3613 446.6885 c218.3096 443.4033 l217.0293 441.3799 216.0264 441.416 214.5146 441.416 c215.7705 442.3789 216.5918 443.5986 216.9893 444.2295 c219.3721 448.0459 l219.2451 448.2822 219.1357 448.5244 219.0459 448.7725 c217.8477 446.8545 l216.5693 444.8311 215.5654 444.8672 214.0547 444.8672 c215.3057 445.8262 216.1348 447.0547 216.5283 447.6797 c218.8662 451.4219 l219.0938 452.5752 219.6904 453.6553 220.585 454.46 c220.2861 454.5732 220.0352 454.6924 219.8848 454.8057 c221.4111 454.8057 222.9238 455.582 223.7549 455.582 c224.292 455.582 224.6348 455.2627 224.6348 454.8389 c224.6016 454.3682 224.1143 453.8877 223.2197 453.8877 c223.0166 453.8877 222.7568 453.915 222.4717 453.9619 c221.9873 453.2861 221.5947 452.6758 221.5947 451.8027 c221.5947 450.166 223.5537 448.8896 225.5303 448.8896 c225.6416 448.8896 225.748 448.8955 225.8594 448.9023 c226.251 450.2285 227.084 451.0986 227.75 451.9492 c226.9521 452.2402 226.0625 452.998 226.0625 453.3408 c226.1631 453.3994 227.6924 452.9189 227.8506 452.876 c227.8828 452.8672 227.916 452.8652 227.9521 452.876 c228.1387 452.9326 228.2939 453.2041 228.2939 453.2324 c228.1309 453.2588 227.1719 453.3838 226.5156 453.6221 c226.0176 453.8037 225.7656 454.1348 225.7656 454.2607 c225.9248 454.2861 226.5322 453.9678 227.4229 453.9678 c227.752 453.9678 227.8164 453.9805 228.1436 454.0205 c227.9131 454.5674 227.4814 455.0303 226.9961 455.0303 c226.7998 455.0303 226.373 454.9082 226.0156 454.7305 c225.7666 455.1162 225.5479 455.625 225.5479 455.9033 c225.5479 456.2305 225.8721 456.6152 226.7871 456.6152 c227.043 456.6152 227.2822 456.5928 227.5049 456.5518 c227.6826 456.5186 227.833 456.4785 227.9951 456.415 c227.9814 456.4365 227.9746 456.4854 227.9746 456.5303 c227.9746 456.6572 228.0889 456.791 228.5195 456.791 c229.2725 456.791 230.0439 456.5439 230.9912 456.5439 c231.2363 456.5439 231.4023 456.5518 231.5449 456.6113 c231.4834 456.4229 231.2178 456.1455 230.9736 455.9209 c231.123 455.7139 231.5156 455.2188 231.5156 454.417 c231.5156 453.1289 230.666 452.0664 230.666 450.7646 c230.666 449.9902 231.2617 449.3096 231.4404 448.9023 c231.4404 448.9023 lf*U*u267.6309 418.9893 m267.7412 416.7061 266.874 416.2725 266.1738 416.2725 c265.4043 416.2725 265.0684 416.8887 265.0684 417.5752 c265.0684 419.0732 266.5381 418.9746 267.6309 418.9893 c267.6309 418.9893 lf1 D267.6592 415.4746 m268.9189 415.4746 l268.835 416.0205 268.7783 416.5947 268.7783 417.1543 c268.7783 420.5566 l268.7783 421.7471 268.3008 422.6846 266.4814 422.6846 c264.9834 422.6846 264.1445 422.1387 264.0889 420.5566 c265.334 420.5566 l265.2637 421.2998 265.6709 421.8164 266.4404 421.8164 c267.6719 421.8164 267.6592 420.7949 267.6309 419.8574 c266.0205 419.8984 263.9189 419.8018 263.9189 417.6592 c263.9189 416.2998 264.3545 415.335 265.8516 415.335 c266.7344 415.335 267.2803 415.6846 267.6309 416.4971 c267.6592 416.4971 l267.6592 415.4746 l267.6592 415.4746 lf*U0 D276.001 415.4746 m276.001 420.375 l276.001 421.7744 275.624 422.6846 274.1133 422.6846 c273.2031 422.6846 272.6709 422.4326 272.2217 421.6348 c272.166 421.6348 l272.166 422.5439 l270.9492 422.5439 l270.9893 422.0547 271.0176 421.5664 271.0176 421.0742 c271.0176 415.4746 l272.166 415.4746 l272.166 419.6621 l272.166 420.6279 272.3486 421.7471 273.6084 421.7471 c274.5889 421.7471 274.8545 421.1299 274.8545 420.375 c274.8545 415.4746 l276.001 415.4746 l276.001 415.4746 lf*u281.7568 419.2969 m281.7568 417.8701 281.7568 416.2725 280.4688 416.2725 c279.0273 416.2725 279.0273 417.8135 279.0273 418.877 c279.0273 420.7666 279.1943 421.7471 280.4268 421.7471 c281.7012 421.7471 281.7568 420.2344 281.7568 419.2969 c281.7568 419.2969 lf1 D281.7568 421.8311 m281.7139 421.8311 l281.3232 422.3896 280.832 422.6846 280.1611 422.6846 c277.8779 422.6846 277.8223 420.6553 277.8223 418.8906 c277.8223 415.7822 278.9717 415.335 280.1045 415.335 c280.8477 415.335 281.3359 415.6572 281.7285 416.3154 c281.7568 416.3154 l281.7568 415.4746 l282.9053 415.4746 l282.9053 425.582 l281.7568 425.582 l281.7568 421.8311 l281.7568 421.8311 lf*U*u0 D289.5107 424.4639 m291.457 424.4639 l292.4512 424.4639 292.8145 423.6494 292.8145 422.9229 c292.8145 422.041 292.3682 421.2441 291.4434 421.2441 c289.5107 421.2441 l289.5107 424.4639 l289.5107 424.4639 lf1 D291.0244 420.1221 m291.457 420.1221 292.4512 420.0684 292.5498 418.835 c292.6611 417.4912 292.5781 416.1748 292.9414 415.4746 c294.2842 415.4746 l294.0889 416.1045 293.9502 417.6865 293.9355 418.1201 c293.8672 420.1504 293.4473 420.543 292.2842 420.7256 c292.2842 420.7529 l293.4736 420.9619 294.1309 421.8721 294.1309 423.0625 c294.1309 424.3223 293.5029 425.582 291.709 425.582 c288.2227 425.582 l288.2227 415.4746 l289.5107 415.4746 l289.5107 420.1221 l291.0244 420.1221 l291.0244 420.1221 lf*U*u0 D297.0283 419.5068 m297.041 421.4658 297.6436 421.8164 298.3711 421.8164 c299.2139 421.8164 299.7852 421.5664 299.7852 419.5068 c297.0283 419.5068 l297.0283 419.5068 lf1 D301.0059 418.6387 m301.0059 419.2412 l301.0059 421.5781 300.5 422.6846 298.4834 422.6846 c296.0352 422.6846 295.7959 420.9775 295.7959 418.9053 c295.7959 415.7822 296.9873 415.335 298.4834 415.335 c299.9678 415.335 300.9326 416.0488 300.9492 417.6162 c299.6895 417.6162 l299.6455 416.9033 299.2402 416.2725 298.457 416.2725 c297.5586 416.2725 297.0283 416.665 297.0283 418.6387 c301.0059 418.6387 l301.0059 418.6387 lf*U0 D307.458 417.4912 m307.458 419.6455 303.9307 419.6191 303.9307 420.8652 c303.9307 421.4805 304.4063 421.8164 305.0215 421.8164 c305.752 421.8164 306.1426 421.4248 306.1299 420.6836 c307.4023 420.6836 l307.5 422.083 306.4229 422.6846 305.1631 422.6846 c303.1758 422.6846 302.7266 421.4941 302.7266 420.7529 c302.7266 418.6387 306.2549 418.6104 306.2549 417.3506 c306.2549 416.6221 305.7227 416.2725 305.0361 416.2725 c303.874 416.2725 303.8594 417.2256 303.8594 417.6309 c302.5586 417.6309 l302.5166 416.0068 303.4688 415.335 304.9951 415.335 c306.3936 415.335 307.458 415.9365 307.458 417.4912 c307.458 417.4912 lf*u310.2412 419.5068 m310.2539 421.4658 310.8564 421.8164 311.5869 421.8164 c312.4268 421.8164 312.998 421.5664 312.998 419.5068 c310.2412 419.5068 l310.2412 419.5068 lf1 D314.2188 418.6387 m314.2188 419.2412 l314.2188 421.5781 313.7129 422.6846 311.6992 422.6846 c309.248 422.6846 309.0107 420.9775 309.0107 418.9053 c309.0107 415.7822 310.2002 415.335 311.6992 415.335 c313.1807 415.335 314.1455 416.0488 314.1621 417.6162 c312.9023 417.6162 l312.8584 416.9033 312.4531 416.2725 311.6699 416.2725 c310.7734 416.2725 310.2412 416.665 310.2412 418.6387 c314.2188 418.6387 l314.2188 418.6387 lf*U*u0 D319.7334 418.9893 m319.8457 416.7061 318.9766 416.2725 318.2764 416.2725 c317.5068 416.2725 317.1729 416.8887 317.1729 417.5752 c317.1729 419.0732 318.6426 418.9746 319.7334 418.9893 c319.7334 418.9893 lf1 D319.7627 415.4746 m321.0225 415.4746 l320.9375 416.0205 320.8809 416.5947 320.8809 417.1543 c320.8809 420.5566 l320.8809 421.7471 320.4053 422.6846 318.5859 422.6846 c317.0869 422.6846 316.2471 422.1387 316.1914 420.5566 c317.4385 420.5566 l317.3682 421.2998 317.7734 421.8164 318.542 421.8164 c319.7754 421.8164 319.7627 420.7949 319.7334 419.8574 c318.125 419.8984 316.0225 419.8018 316.0225 417.6592 c316.0225 416.2998 316.457 415.335 317.9541 415.335 c318.8379 415.335 319.3848 415.6846 319.7334 416.4971 c319.7627 416.4971 l319.7627 415.4746 l319.7627 415.4746 lf*U0 D324.3115 422.5439 m323.1641 422.5439 l323.1641 415.4746 l324.3115 415.4746 l324.3115 419.6455 l324.3115 420.5996 324.6338 421.5664 325.9082 421.5664 c326.1182 421.5664 326.3154 421.5225 326.5254 421.4941 c326.5254 422.6846 l325.4053 422.6846 324.8145 422.5596 324.3379 421.4805 c324.3115 421.4805 l324.3115 422.5439 l324.3115 422.5439 lf332.6611 420.2783 m332.7314 421.8594 331.9063 422.6846 330.4902 422.6846 c328.042 422.6846 327.8027 420.9775 327.8027 418.9053 c327.8027 415.7822 328.9941 415.335 330.4902 415.335 c331.2764 415.335 332.7607 415.8389 332.7168 417.8271 c331.5137 417.8271 l331.5576 416.5527 330.7568 416.2725 330.4902 416.2725 c329.3018 416.2725 329.0088 417.0986 329.0088 419.3955 c329.0088 421.3281 329.6094 421.7471 330.4902 421.7471 c330.9277 421.7471 331.501 421.4385 331.4717 420.2783 c332.6611 420.2783 l332.6611 420.2783 lf339.7607 415.4746 m339.7607 420.4873 l339.7607 422.083 339.0889 422.6846 337.8857 422.6846 c336.96 422.6846 336.4277 422.4609 335.9668 421.6348 c335.9102 421.6348 l335.9102 425.582 l334.7627 425.582 l334.7627 415.4746 l335.9102 415.4746 l335.9102 419.6338 l335.9102 420.8232 336.2031 421.7471 337.3506 421.7471 c338.332 421.7471 338.6104 421.1299 338.6104 420.2627 c338.6104 415.4746 l339.7607 415.4746 l339.7607 415.4746 lf*u266.3232 431.2725 m265.1318 431.2725 264.8389 432.0986 264.8389 434.3955 c264.8389 436.3281 265.4414 436.7471 266.3232 436.7471 c267.2041 436.7471 267.8066 436.3281 267.8066 434.3955 c267.8066 432.0986 267.5127 431.2725 266.3232 431.2725 c266.3232 431.2725 lf1 D266.3232 430.335 m267.8213 430.335 269.0117 430.7822 269.0117 433.9053 c269.0117 435.9775 268.7734 437.6846 266.3232 437.6846 c263.8721 437.6846 263.6348 435.9775 263.6348 433.9053 c263.6348 430.7822 264.8242 430.335 266.3232 430.335 c266.3232 430.335 lf*U0 D269.9492 437.5439 m269.9492 436.6768 l271.041 436.6768 l271.041 430.4746 l272.1885 430.4746 l272.1885 436.6768 l273.6162 436.6768 l273.6162 437.5439 l272.1885 437.5439 l272.1885 438.749 l272.1885 439.3223 272.3975 439.8408 273.6162 439.7568 c273.6162 440.582 l273.4482 440.6113 273.3086 440.625 273.0713 440.625 c272.0488 440.625 271.041 440.3457 271.041 438.916 c271.041 437.5439 l269.9492 437.5439 l269.9492 437.5439 lf283.2422 430.4746 m283.2422 431.5947 l279.2402 431.5947 l279.2402 435.0947 l282.8799 435.0947 l282.8799 436.2158 l279.2402 436.2158 l279.2402 439.4639 l283.1592 439.4639 l283.1592 440.582 l277.9512 440.582 l277.9512 430.4746 l283.2422 430.4746 l283.2422 430.4746 lf*u288.5645 434.2969 m288.5645 432.8701 288.5645 431.2725 287.2764 431.2725 c285.833 431.2725 285.833 432.8135 285.833 433.877 c285.833 435.7666 286.0029 436.7471 287.2344 436.7471 c288.5078 436.7471 288.5645 435.2344 288.5645 434.2969 c288.5645 434.2969 lf1 D288.5645 436.8311 m288.5225 436.8311 l288.1299 437.3896 287.6406 437.6846 286.9678 437.6846 c284.6865 437.6846 284.6309 435.6553 284.6309 433.8906 c284.6309 430.7822 285.7773 430.335 286.9121 430.335 c287.6533 430.335 288.1445 430.6572 288.5361 431.3154 c288.5645 431.3154 l288.5645 430.4746 l289.7119 430.4746 l289.7119 440.582 l288.5645 440.582 l288.5645 436.8311 l288.5645 436.8311 lf*U0 D295.6055 432.8545 m295.6055 431.6787 294.8359 431.2168 294.2188 431.2168 c293.4082 431.2168 293.0176 431.792 293.0176 432.6436 c293.0176 437.5439 l291.8682 437.5439 l291.8682 432.1543 l291.8682 430.9512 292.541 430.335 293.7715 430.335 c294.5137 430.335 295.1855 430.6846 295.5635 431.3281 c295.6055 431.3281 l295.6055 430.4746 l296.8262 430.4746 l296.7822 430.9658 296.7549 431.4551 296.7549 431.9443 c296.7549 437.5439 l295.6055 437.5439 l295.6055 432.8545 l295.6055 432.8545 lf303.7129 435.2783 m303.7842 436.8594 302.9561 437.6846 301.543 437.6846 c299.0918 437.6846 298.8545 435.9775 298.8545 433.9053 c298.8545 430.7822 300.0459 430.335 301.543 430.335 c302.3262 430.335 303.8105 430.8389 303.7695 432.8271 c302.5654 432.8271 l302.6074 431.5537 301.8086 431.2725 301.543 431.2725 c300.3516 431.2725 300.0586 432.0986 300.0586 434.3955 c300.0586 436.3281 300.6611 436.7471 301.543 436.7471 c301.9775 436.7471 302.5508 436.4385 302.5244 435.2783 c303.7129 435.2783 l303.7129 435.2783 lf*u309.4404 433.9893 m309.5508 431.7061 308.6836 431.2725 307.9834 431.2725 c307.2139 431.2725 306.877 431.8887 306.877 432.5752 c306.877 434.0732 308.3467 433.9746 309.4404 433.9893 c309.4404 433.9893 lf1 D309.4678 430.4746 m310.7275 430.4746 l310.6445 431.0205 310.5879 431.5947 310.5879 432.1543 c310.5879 435.5566 l310.5879 436.7471 310.1123 437.6846 308.291 437.6846 c306.792 437.6846 305.9541 437.1387 305.8984 435.5566 c307.1436 435.5566 l307.0723 436.2998 307.4805 436.8164 308.249 436.8164 c309.4824 436.8164 309.4678 435.7949 309.4404 434.8574 c307.8291 434.8984 305.7295 434.8018 305.7295 432.6592 c305.7295 431.2998 306.1641 430.335 307.6611 430.335 c308.5449 430.335 309.0889 430.6846 309.4404 431.498 c309.4678 431.498 l309.4678 430.4746 l309.4678 430.4746 lf*U0 D311.792 437.5439 m311.792 436.6768 l312.9541 436.6768 l312.9541 431.6504 l312.9541 430.8389 313.4424 430.3906 314.5361 430.3906 c314.9121 430.3906 315.29 430.4746 315.6689 430.5039 c315.6689 431.3838 l315.417 431.3564 315.2344 431.3281 315.1514 431.3281 c314.1016 431.3281 314.1016 431.9043 314.1016 432.3506 c314.1016 436.6768 l315.6416 436.6768 l315.6416 437.5439 l314.1016 437.5439 l314.1016 439.4199 l312.9541 438.9033 l312.9541 437.5439 l311.792 437.5439 l311.792 437.5439 lf*u1 D317.834 437.5439 m316.6895 437.5439 l316.6895 430.4746 l317.834 430.4746 l317.834 437.5439 l317.834 437.5439 lf316.6182 439.3516 m317.9072 439.3516 l317.9072 440.582 l316.6182 440.582 l316.6182 439.3516 l316.6182 439.3516 lf*U*u0 D322.3145 431.2725 m321.123 431.2725 320.8301 432.0986 320.8301 434.3955 c320.8301 436.3281 321.4326 436.7471 322.3145 436.7471 c323.1953 436.7471 323.7988 436.3281 323.7988 434.3955 c323.7988 432.0986 323.5059 431.2725 322.3145 431.2725 c322.3145 431.2725 lf1 D322.3145 430.335 m323.8105 430.335 325.002 430.7822 325.002 433.9053 c325.002 435.9775 324.7656 437.6846 322.3145 437.6846 c319.8633 437.6846 319.626 435.9775 319.626 433.9053 c319.626 430.7822 320.8174 430.335 322.3145 430.335 c322.3145 430.335 lf*U0 D331.8066 430.4746 m331.8066 435.375 l331.8066 436.7744 331.4277 437.6846 329.917 437.6846 c329.0059 437.6846 328.4736 437.4326 328.0273 436.6348 c327.9707 436.6348 l327.9707 437.5439 l326.7529 437.5439 l326.7939 437.0547 326.8232 436.5664 326.8232 436.0742 c326.8232 430.4746 l327.9707 430.4746 l327.9707 434.6621 l327.9707 435.6279 328.1514 436.7471 329.4111 436.7471 c330.3926 436.7471 330.6592 436.1299 330.6592 435.375 c330.6592 430.4746 l331.8066 430.4746 l331.8066 430.4746 lf265.334 445.4746 m265.334 450.0947 l268.8623 450.0947 l268.8623 451.2158 l265.334 451.2158 l265.334 454.4639 l269.0576 454.4639 l269.0576 455.582 l264.0459 455.582 l264.0459 445.4746 l265.334 445.4746 l265.334 445.4746 lf*u271.3516 449.5068 m271.3643 451.4658 271.9668 451.8164 272.6943 451.8164 c273.5352 451.8164 274.1094 451.5664 274.1094 449.5068 c271.3516 449.5068 l271.3516 449.5068 lf1 D275.3271 448.6387 m275.3271 449.2412 l275.3271 451.5781 274.8232 452.6846 272.8057 452.6846 c270.3564 452.6846 270.1172 450.9775 270.1172 448.9053 c270.1172 445.7822 271.3086 445.335 272.8057 445.335 c274.29 445.335 275.2559 446.0488 275.2705 447.6162 c274.0107 447.6162 l273.9678 446.9043 273.5635 446.2725 272.7783 446.2725 c271.8828 446.2725 271.3516 446.665 271.3516 448.6387 c275.3271 448.6387 l275.3271 448.6387 lf*U*u0 D280.9688 449.2969 m280.9688 447.8701 280.9688 446.2725 279.6807 446.2725 c278.2402 446.2725 278.2402 447.8135 278.2402 448.877 c278.2402 450.7666 278.4063 451.7471 279.6387 451.7471 c280.9131 451.7471 280.9688 450.2344 280.9688 449.2969 c280.9688 449.2969 lf1 D280.9688 451.8311 m280.9268 451.8311 l280.5361 452.3896 280.0439 452.6846 279.373 452.6846 c277.0898 452.6846 277.0352 450.6553 277.0352 448.8906 c277.0352 445.7822 278.1836 445.335 279.3164 445.335 c280.0605 445.335 280.5498 445.6572 280.9404 446.3154 c280.9688 446.3154 l280.9688 445.4746 l282.1162 445.4746 l282.1162 455.582 l280.9688 455.582 l280.9688 451.8311 l280.9688 451.8311 lf*U*u0 D285.3506 449.5068 m285.3662 451.4658 285.9668 451.8164 286.6943 451.8164 c287.5352 451.8164 288.1104 451.5664 288.1104 449.5068 c285.3506 449.5068 l285.3506 449.5068 lf1 D289.3271 448.6387 m289.3271 449.2412 l289.3271 451.5781 288.8232 452.6846 286.8076 452.6846 c284.3584 452.6846 284.1191 450.9775 284.1191 448.9053 c284.1191 445.7822 285.3096 445.335 286.8076 445.335 c288.293 445.335 289.2578 446.0488 289.2705 447.6162 c288.0107 447.6162 l287.9707 446.9043 287.5635 446.2725 286.7793 446.2725 c285.8838 446.2725 285.3506 446.665 285.3506 448.6387 c289.3271 448.6387 l289.3271 448.6387 lf*U0 D292.4219 452.5439 m291.2744 452.5439 l291.2744 445.4746 l292.4219 445.4746 l292.4219 449.6455 l292.4219 450.5996 292.7441 451.5664 294.0186 451.5664 c294.2285 451.5664 294.4238 451.5225 294.6338 451.4941 c294.6338 452.6846 l293.5156 452.6846 292.9268 452.5596 292.4512 451.4805 c292.4219 451.4805 l292.4219 452.5439 l292.4219 452.5439 lf*u299.4971 448.9893 m299.6094 446.7061 298.7422 446.2725 298.042 446.2725 c297.2705 446.2725 296.9355 446.8887 296.9355 447.5752 c296.9355 449.0732 298.4053 448.9746 299.4971 448.9893 c299.4971 448.9893 lf1 D299.5264 445.4746 m300.7861 445.4746 l300.7002 446.0205 300.6445 446.5947 300.6445 447.1543 c300.6445 450.5566 l300.6445 451.7471 300.168 452.6846 298.3496 452.6846 c296.8525 452.6846 296.0107 452.1387 295.9541 450.5566 c297.2021 450.5566 l297.1338 451.2998 297.5361 451.8164 298.3076 451.8164 c299.541 451.8164 299.5264 450.7949 299.4971 449.8574 c297.8877 449.8984 295.7881 449.8018 295.7881 447.6592 c295.7881 446.2998 296.2207 445.335 297.7197 445.335 c298.6035 445.335 299.1475 445.6846 299.4971 446.498 c299.5264 446.498 l299.5264 445.4746 l299.5264 445.4746 lf*U0 D304.0059 455.582 m302.8584 455.582 l302.8584 445.4746 l304.0059 445.4746 l304.0059 455.582 l304.0059 455.582 lf310.4443 454.4639 m310.4707 454.4639 l313.2422 445.4746 l314.4629 445.4746 l317.29 454.4639 l317.3164 454.4639 l317.3164 445.4746 l318.6035 445.4746 l318.6035 455.582 l316.4766 455.582 l313.9014 447.0986 l313.874 447.0986 l311.3252 455.582 l309.2402 455.582 l309.2402 445.4746 l310.4443 445.4746 l310.4443 454.4639 l310.4443 454.4639 lf*u1 D321.875 452.5439 m320.7246 452.5439 l320.7246 445.4746 l321.875 445.4746 l321.875 452.5439 l321.875 452.5439 lf320.6543 454.3516 m321.9434 454.3516 l321.9434 455.582 l320.6543 455.582 l320.6543 454.3516 l320.6543 454.3516 lf*U0 D328.8447 445.4746 m328.8447 450.375 l328.8447 451.7744 328.4668 452.6846 326.9531 452.6846 c326.042 452.6846 325.5098 452.4326 325.0635 451.6348 c325.0068 451.6348 l325.0068 452.5439 l323.7891 452.5439 l323.833 452.0547 323.8594 451.5664 323.8594 451.0742 c323.8594 445.4746 l325.0068 445.4746 l325.0068 449.6621 l325.0068 450.6279 325.1875 451.7471 326.4502 451.7471 c327.4287 451.7471 327.6953 451.1299 327.6953 450.375 c327.6953 445.4746 l328.8447 445.4746 l328.8447 445.4746 lf*u1 D331.9795 452.5439 m330.832 452.5439 l330.832 445.4746 l331.9795 445.4746 l331.9795 452.5439 l331.9795 452.5439 lf330.7617 454.3516 m332.0508 454.3516 l332.0508 455.582 l330.7617 455.582 l330.7617 454.3516 l330.7617 454.3516 lf*U0 D338.5156 447.4912 m338.5156 449.6455 334.9902 449.6191 334.9902 450.8652 c334.9902 451.4805 335.4658 451.8164 336.0811 451.8164 c336.8086 451.8164 337.1992 451.4248 337.1875 450.6836 c338.459 450.6836 l338.5596 452.083 337.4805 452.6846 336.2207 452.6846 c334.2334 452.6846 333.7842 451.4941 333.7842 450.7529 c333.7842 448.6387 337.3115 448.6104 337.3115 447.3506 c337.3115 446.6221 336.7822 446.2725 336.0938 446.2725 c334.9336 446.2725 334.917 447.2256 334.917 447.6309 c333.6182 447.6309 l333.5742 446.0068 334.5264 445.335 336.0518 445.335 c337.4531 445.335 338.5156 445.9375 338.5156 447.4912 c338.5156 447.4912 lf339.1426 452.5439 m339.1426 451.6768 l340.3047 451.6768 l340.3047 446.6504 l340.3047 445.8389 340.7959 445.3906 341.8867 445.3906 c342.2656 445.3906 342.6436 445.4746 343.0225 445.5039 c343.0225 446.3838 l342.7686 446.3564 342.5879 446.3281 342.502 446.3281 c341.4521 446.3281 341.4521 446.9043 341.4521 447.3506 c341.4521 451.6768 l342.9932 451.6768 l342.9932 452.5439 l341.4521 452.5439 l341.4521 454.4199 l340.3047 453.9033 l340.3047 452.5439 l339.1426 452.5439 l339.1426 452.5439 lf345.2559 452.5439 m344.1113 452.5439 l344.1113 445.4746 l345.2559 445.4746 l345.2559 449.6455 l345.2559 450.5996 345.5781 451.5664 346.8555 451.5664 c347.0654 451.5664 347.2607 451.5225 347.4707 451.4941 c347.4707 452.6846 l346.3496 452.6846 345.7617 452.5596 345.2852 451.4805 c345.2559 451.4805 l345.2559 452.5439 l345.2559 452.5439 lf349.1553 452.5439 m347.8271 452.5439 l350.2197 445.4746 l349.4209 442.8018 l350.6123 442.8018 l353.8154 452.5439 l352.5732 452.5439 l350.8789 446.792 l350.8496 446.792 l349.1553 452.5439 l349.1553 452.5439 lfu*u0 O0 g800 Ar264.4902 482.4014 m264.4902 482.2178 L264.4902 481.3604 265.0322 481.0889 265.5488 481.0889 c266.1875 481.0889 266.6777 481.3604 266.6777 482.1123 c266.6777 483.5127 263.8428 483.3555 263.8428 485.2539 c263.8428 486.374 264.6387 486.9688 265.6973 486.9688 c266.8525 486.9688 267.5 486.4092 267.4482 485.123 c266.6074 485.123 L266.6162 485.8135 266.3975 486.2686 265.6367 486.2686 c265.1553 486.2686 264.665 486.0234 264.665 485.3408 c264.665 483.9502 267.5 484.1514 267.5 482.1475 c267.5 480.8174 266.5811 480.3887 265.54 480.3887 c263.6768 480.3711 263.6768 481.7979 263.6934 482.4014 C264.4902 482.4014 lf*U*u268.8389 480.5205 m268.8389 486.8379 L270.7119 486.8379 L271.5605 486.8379 272.4697 486.5225 272.4697 485.0352 c272.4697 483.5996 271.3496 483.3027 270.7031 483.3027 c269.6436 483.3027 L269.6436 480.5205 L268.8389 480.5205 lf1 D269.6436 484.0029 m270.5273 484.0029 L270.8604 484.0029 271.6475 484.0898 271.6475 485.0791 c271.6475 486.041 270.9297 486.1377 270.7549 486.1377 c269.6436 486.1377 L269.6436 484.0029 lf*U*u0 D273.5732 482.8301 m273.5732 484.9033 L273.5732 486.1641 274.2207 486.9688 275.5586 486.9688 c276.8975 486.9688 277.5449 486.1641 277.5449 484.9033 c277.5449 482.8301 L277.5449 481.0801 276.8975 480.3887 275.5586 480.3887 c274.2207 480.3887 273.5732 481.0801 273.5732 482.8301 cf1 D276.7227 482.7949 m276.7227 484.9297 L276.7227 486.251 275.8125 486.2949 275.5586 486.2949 c275.3047 486.2949 274.3945 486.251 274.3945 484.9297 c274.3945 482.7949 L274.3945 481.4121 274.7979 481.0625 275.5586 481.0625 c276.3203 481.0625 276.7227 481.4121 276.7227 482.7949 cf*U*u0 D283.3203 486.8379 m283.3203 480.5205 L282.2178 480.5205 L279.7236 485.9971 L279.7061 485.9971 L279.7061 480.5205 L278.9893 480.5205 L278.9893 486.8379 L280.126 486.8379 L282.585 481.4297 L282.6025 481.4297 L282.6025 486.8379 L283.3203 486.8379 lf*U*u285.4023 482.4014 m285.4023 482.2178 L285.4023 481.3604 285.9453 481.0889 286.4609 481.0889 c287.0996 481.0889 287.5898 481.3604 287.5898 482.1123 c287.5898 483.5127 284.7549 483.3555 284.7549 485.2539 c284.7549 486.374 285.5518 486.9688 286.6104 486.9688 c287.7656 486.9688 288.4121 486.4092 288.3594 485.123 c287.5195 485.123 L287.5293 485.8135 287.3096 486.2686 286.5488 486.2686 c286.0674 486.2686 285.5781 486.0234 285.5781 485.3408 c285.5781 483.9502 288.4121 484.1514 288.4121 482.1475 c288.4121 480.8174 287.4932 480.3887 286.4521 480.3887 c284.5889 480.3711 284.5889 481.7979 284.6064 482.4014 C285.4023 482.4014 lf*U*u289.6201 482.8301 m289.6201 484.9033 L289.6201 486.1641 290.2676 486.9688 291.6064 486.9688 c292.9443 486.9688 293.5928 486.1641 293.5928 484.9033 c293.5928 482.8301 L293.5928 481.0801 292.9443 480.3887 291.6064 480.3887 c290.2676 480.3887 289.6201 481.0801 289.6201 482.8301 cf1 D292.7705 482.7949 m292.7705 484.9297 L292.7705 486.251 291.8604 486.2949 291.6064 486.2949 c291.3525 486.2949 290.4424 486.251 290.4424 484.9297 c290.4424 482.7949 L290.4424 481.4121 290.8447 481.0625 291.6064 481.0625 c292.3672 481.0625 292.7705 481.4121 292.7705 482.7949 cf*U*u0 D295.7803 483.4248 m295.7803 480.5205 L294.9746 480.5205 L294.9746 486.8379 L297.1533 486.8379 L298.2734 486.8379 298.667 486.0498 298.667 485.2627 c298.667 484.5186 298.2559 483.9502 297.5127 483.8193 c297.5127 483.8018 L298.2393 483.6875 298.501 483.4424 298.5449 482.1738 c298.5537 481.9023 298.6416 480.9141 298.7637 480.5205 c297.9238 480.5205 L297.6963 480.958 297.749 481.7803 297.6787 482.6201 c297.6172 483.3896 296.9961 483.4248 296.7256 483.4248 C295.7803 483.4248 lf1 D295.7803 484.125 m296.9873 484.125 L297.5654 484.125 297.8447 484.624 297.8447 485.1748 c297.8447 485.6299 297.6172 486.1377 296.9961 486.1377 c295.7803 486.1377 L295.7803 484.125 lf*U*u0 D299.8584 480.5205 m299.8584 486.8379 L303.1123 486.8379 L303.1123 486.1377 L300.6631 486.1377 L300.6631 484.1074 L302.9365 484.1074 L302.9365 483.4072 L300.6631 483.4072 L300.6631 481.2197 L303.165 481.2197 L303.165 480.5205 L299.8584 480.5205 lf*U*u304.25 486.8379 m306.1924 486.8379 L306.998 486.8379 307.5752 486.5488 307.8896 485.875 c308.1445 485.3408 308.1699 484.0811 308.1699 483.8799 c308.1699 482.5322 308.0479 481.7539 307.7852 481.334 c307.4434 480.791 306.8057 480.5205 305.7021 480.5205 c304.25 480.5205 L304.25 486.8379 lf1 D305.0547 481.2197 m305.8164 481.2197 L306.9355 481.2197 307.3467 481.6396 307.3467 483.1094 c307.3467 484.3877 L307.3467 485.665 306.9541 486.1377 306.1133 486.1377 c305.0547 486.1377 L305.0547 481.2197 lf*U*u0 D311.6006 480.5205 m311.6006 486.8379 L313.6553 486.8379 L314.5313 486.8379 314.8271 486.54 315.0645 486.1904 c315.2842 485.8486 315.3184 485.4727 315.3184 485.3496 c315.3184 484.5625 315.0479 484.0371 314.2334 483.8535 c314.2334 483.8096 L315.1338 483.7051 315.5283 483.1621 315.5283 482.2959 c315.5283 480.6777 314.3477 480.5205 313.6289 480.5205 C311.6006 480.5205 lf1 D312.4043 484.1768 m313.5762 484.1768 L314.208 484.1865 314.5137 484.5713 314.5137 485.1836 c314.5137 485.709 314.2158 486.1377 313.542 486.1377 c312.4043 486.1377 L312.4043 484.1768 lf312.4043 481.2197 m313.542 481.2197 L314.3994 481.2197 314.707 481.832 314.707 482.2959 c314.707 483.3027 314.085 483.4775 313.2627 483.4775 c312.4043 483.4775 L312.4043 481.2197 lf*U*u0 D319.6406 486.8379 m320.4551 486.8379 L318.7314 482.9258 L318.7314 480.5205 L317.9258 480.5205 L317.9258 482.9258 L316.2275 486.8379 L317.1299 486.8379 L318.3623 483.7832 L319.6406 486.8379 lf*U*u326.7285 486.8379 m326.7285 486.1377 L325.0654 486.1377 L325.0654 480.5205 L324.2607 480.5205 L324.2607 486.1377 L322.5977 486.1377 L322.5977 486.8379 L326.7285 486.8379 lf*U*u327.6123 480.5205 m327.6123 486.8379 L328.417 486.8379 L328.417 484.1074 L330.6309 484.1074 L330.6309 486.8379 L331.4355 486.8379 L331.4355 480.5205 L330.6309 480.5205 L330.6309 483.4072 L328.417 483.4072 L328.417 480.5205 L327.6123 480.5205 lf*U*u332.9053 480.5205 m332.9053 486.8379 L336.1611 486.8379 L336.1611 486.1377 L333.7109 486.1377 L333.7109 484.1074 L335.9854 484.1074 L335.9854 483.4072 L333.7109 483.4072 L333.7109 481.2197 L336.2129 481.2197 L336.2129 480.5205 L332.9053 480.5205 lf*UUUU-7894 480.4844 m8489 480.4844 L(N) *-7894 505.4844 m8489 505.4844 L(N) *228.6406 8612 m228.6406 -7771 L(N) *193.25 8612 m193.25 -7771 L(N) *-7894 355.4844 m8489 355.4844 L(N) *389.1875 8612 m389.1875 -7771 L(N) *LB%AI5_EndLayer--%%PageTrailergsave annotatepage grestore showpage%%TrailerAdobe_Illustrator_AI5 /terminate get execAdobe_shading_AI8 /terminate get execAdobe_ColorImage_AI6 /terminate get execAdobe_cshow /terminate get execAdobe_level2_AI5 /terminate get exec%%EOF